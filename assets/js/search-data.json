{
  
    
        "post0": {
            "title": "Random Number Generation in Power BI",
            "content": "Random Number Generation . A quick post on creating random numbers in Power BI. While it&#39;s very easy to use, there are couple of things to keep in mind to get correct results. Typically the random numbers aren&#39;t needed in Power BI reports but I use them very often for simulations, statsitical functions and synthetic data generation. . What are random numbers? . As series of values is said to contain random numbers if all the values have equal probability of occurence and there is no correlation, i.e. the numbers are uniformly distributed. . How to generate random numbers? . In DAX, you can use RAND() function to generate random numbers. Similarly, to generate random numbers between two numbers, use RANDBETWEEN(). . In Power Query, List.Random() creates a list of random numbers, while Number.Random() creates a single random number. You can add an index column before using the Number.Random() to get different random numbers on each row. You can delete the index column after the Number.Random() step. There isn&#39;t a List.RandomBetween() but Number.RandomBetween() can be used along with index column to generate numbers between two specified values. . Tip 1: DAX and M RandomBetween behave differently . If you generate random numbers between (1,100) using DAX RANDOMBETWEEN(1,100), it will generate integer/whole numbers between (1,100) and will include numbers 1 and 100. In constrast to that, in Power Query Number.RandomBetween(1,100) will generate decimal numbers between 1 and 100 and will exclude 100. Thus, if you are using M and want to include 100, use Number.RandomBetween(1,101). . Tip 2: Multiple Random numbers in Power Query . To create multiple columns containing random numbers, add an index column each time before using the Number.Random(). You can delete the columns later. . You can alse wrap the table with Table.Buffer() to generate different number on each row. . Tip 3: You can use RAND() to create decimal random numbers between two numbers . As RANDBETWEEN() creates integers, you can use RAND()*N to create decimal numbers between (0,N). In this case, the numbers will not include 0 and N. . Similarly, to generate decimal random numbers between (N1,N2) use N2 + RAND() *(N2-N1). N1 &amp; N2 are not included. . You can divide RANDBETWEEN() by 10^i, to create numbers with &#39;i&#39; decimal digits . Tip 4: IMPORTANT Be careful with using ROUND() with RAND() . As mentioned above, all random numbers should have equal probability of occurence otherwise it violates the uniform distribution assumption. If you use ROUND() with RAND() ( e.g.ROUND(RAND()*50,0)) to generate integers between 0 and 50, the end numbers will have half the probability of occurence compared to rest of the numbers. This is because numbers greater than or equal to 0.5 will be rounded to the next integer. e.g. 49.25 will be rounded down to 49 whereas 49.68 will be rounded up to 50. Thus, the end values have half the probability of occurence. The correct way is to use INT() i.e INT(RAND()*50). While the error resulting from this will be minimal, it&#39;s better to use the correct formula when creating synthetic data to avoid bias. . Tip 5: DAX &amp; M do not allow random seed . In Python and R, you can specify the seed number to generate reproducible random numbers. Both in DAX &amp; M do not allow seed, so with each refresh new random numbers are generated. In many uses, this is not desirable. A work around for that is to generate random numbers in Power Query using M, indexing those and disabling the refresh for that query. . Create an index column and random number column using . Table.FromColumns( { {1..n_samples}, List.Random(n_samples)}, {&quot;Index&quot;, &quot;NRandom&quot;} ) . where n_samples &gt;&gt;&gt; number of random values you need. For example, if you are going to need 3 sets of random numbers 1000 each, use n_samples &gt;&gt; 3000 ,say 5000. . | Uncheck &quot;Include in report refresh&quot; for that query | Now you can use this list by using FILETR() in DAX by passing Table[Index] &lt; 1001 and so forth | . Tip 6: Randomly subsample the data by using SAMPLE() in DAX . I use this often to check robsutness/sensitivity of the simulation results with respect to the features used. For example, some columns may show correlaton or importance when used entirely but when sub-sampled may or may not. . To sample a column, use SAMPLE(sample_size, &#39;Table&#39;, &#39;Table&#39;[Column]) . Ruth provides a good overview of the SAMPLE() function below: .",
            "url": "https://pawarbi.github.io/blog/powerbi/dax/m/2020/06/03/powerbi-random-numbers.html",
            "relUrl": "/powerbi/dax/m/2020/06/03/powerbi-random-numbers.html",
            "date": " • Jun 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Recommendations When Using Python/R in Power BI",
            "content": "Overview . Using Python and R in Power BI, when used correctly, can allow quick experimentation, data/calculation validation, statistical analysis/inferencing of the data. However, before you use Python/R in Power BI keep the performance and data privacy issues in mind. I personally use Python in my report development, model development process but use it as a tool for experimentation rather than replacement to native Power BI tools. Below are my recommendations / tips: . Always read the documentation Python and R for known limitations, official guidelines | . Uncheck “Enhanced meta-data” if you are using Python. Power BI released it as a preview feature in March 2020. Unfortunately, I learned it the hard way. If you use Python in Power Query with this option selected and save the file, it will currupt your file and you cannot recover it back (well, not entirely). Enhanced metadata allows read/write XMLA (Premium feature). This is a serious bug that MS needs to fix. If you need to use this option, use R. | . . Keep the data privacy implications in mind. Data Privacy must be set to &quot;Public&quot; . While that does not mean the report/dashboard/data are made public, do not use Python /R if you are working with sensitive data. When the data privacy is set to &quot;Public&quot;, Microsoft stores it in less restrictive storage but the data is safe. | . Always create and use virtual environment ,e.g. use virtualenv/pipenv, conda. Conda may not always work if multiple Python copies are installed and is a known issue. More on Python virtual enviroment here. Use the directory of the virtual environment as Python home directory. | . . Only install the packages you need. Power BI needs pandas and matplotlib installed at minimum. I personally only use Pandas, Numpy, Statsmodels, Scipy, Scikit-learn, Matplotlib, Seaborn in my Power BI virtual environment. If you find yourself needing more packages, you should consider using the IDE and deploying Python/R outside of Power BI. | . Only import the packages you need, e.g. from scipy.stats import lognorm instead of from scipy import * to the reduce execution time | . By default, Power BI loads pandas, matplotlib and os, no need to re-import it (import pandas as pd). If you do need to alias the package, create a variable, pd=pandas and then you can use pd.read_csv(..) | . Change date column to text before running Python and change it back to Date format after running the script. If you keep it as Date, all Date values will be returned as &quot;Microsoft.OldDb.Date&quot;. You can also change the column type to Date/Time and parse it back but it&#39;s esier to convert text. | . Duplicate the original query and apply Python /R on duplicated query, instead of the original. | . Apply Python / R as the last step or when the rows have been filtered, unnecessary columns have been removed to reduce the *.csv file Power BI creates. The temporary csv file must be &lt;250 MB, so it&#39;s best to reduce the data to keep the file size down. | . Use only one Python / R script in a query, if you must use Python / R. | . Always run Query Diagnostics to make sure Python/R script isn’t the bottleneck, query execution time is &lt;&lt; 5min. Query will time out if the execution time is &gt;30 minutes. Run the script in your IDE to time the execution. If you are using Python, vectorize the data to improve efficiency, avoid for loops, use apply(), avoid intermediate dataframes. | . Power Query is powerful and preferred, so don&#39;t use Python / R as a replacement. Use it for quick experimentation, data validation, spot/sanity checking, calculation validation, statistical analysis only. I use it often in my workflow for finding patterns, anamolies, outliers, correlation etc. using Power BI + Jupyter (blog to come. ). I have intentionally left out Machine Learning here. I do not think an ML model should be deployed as a Python / R script because of the limitations and it&#39;s a bad deployment practice in general. ML models need to be revised, monitored for performance, data drift etc and Power BI does not allow that. Do not deploy ML models in Power Query | . Use Power Query Parameter in Python /R if you need to reuse a script or need a quick way to change arguments,params. You can pass &amp;Text.From([param]) or &amp;Number.From([param]) in any Python / R script to make it more dynamic. | . Apply correct summarization for visuals (No summarization, sum, average etc.), always add an index/unique key to make sure rows are not removed. | . Create Python/R visuals after you have finalized column/measure names. Renaming column/measure will throw an error . | Use native Power BI visuals for production reports and Python/R visuals for getting more insights and for experimentation. Power/R visuals are very slow to refresh and do not allow cross-filtering, highlighting. . | If you do use Python/R visual in production report, run the Performance Analyzer to check execution &amp; refresh time. If it&#39;s too slow, consider using native visuals or build one in charticulator. I rarely use custom visuals to avoid dependency and data security reasons. . | . David Eldersveld provides an excellent overview in his video and blog . Reference: . https://docs.microsoft.com/en-us/power-bi/connect-data/desktop-python-scripts | https://docs.microsoft.com/en-us/power-bi/connect-data/desktop-python-in-query-editor | https://docs.microsoft.com/en-us/power-bi/connect-data/desktop-r-scripts | https://dataveld.com/2018/11/10/5-performance-tips-for-r-and-python-scripts-in-power-bi/ |",
            "url": "https://pawarbi.github.io/blog/powerbi/r/python/2020/05/15/powerbi-python-r-tips.html",
            "relUrl": "/powerbi/r/python/2020/05/15/powerbi-python-r-tips.html",
            "date": " • May 15, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Time series Forecasting in Power BI",
            "content": "Overview . In Part 1 I covered the exploratory data analysis of a time series using Python &amp; R and in Part 2 I created various forecasting models, explained their differences and finally talked about forecast uncertainty. In this post, I hope to provide a definitive guide to forecasting in Power BI. I wanted to write about this because forecasting is critical for any business and the documentation on this is very thin, and it&#39;s easy to (mis)use it. . If you do not have experience in forecasting, I would encourage you to read the above two blogs to learn more about forecasting in general. . I will use the same dataset I used in the earlier blog posts and compare the Power BI forecast with the Python models I created. . How to create a forecast in PowerBI? . It&#39;s very easy! Parker Stevens gives a nice overview of it in the clip below. . . To create a forecast you need: . A continuous date column | A numerical column with the numbers you want to forecast . Drag and drop the dates in &quot;Axis&quot; field | Drag and drop the numbers in the &#39;Values&#39; field | Click on the down arrow in the &#39;Date&#39; field and apply the required hierarchy (month, quarter, week etc.) or remove &#39;Date Hierarchy&#39; if you do not want hierarchy. If removed, it will plot the data for each date rather than the hierarchy. | In the Format options, make sure the X Axis type is &#39;Continuous&#39; | Go to &#39;Analytics&#39; pane, Forecast &gt; +Add &gt; Enter the Forecast Length | | . That&#39;s it ! We have a forecast. You can hover over the line chart to get the forecast predictions along with confidence interval. Very easy. . But how do we know: . if the forecast is accurate | What model(s) was used to create the forecast? | what assumptions were made to make the forecast? | what&#39;s the forecast uncertainty? | how do we display the forecasts? | what are the limitations? | can we improve the forecast? | when is it appropriate or no appropriate to use it? | . Let&#39;s first take a look at the documentation from the Power BI team and see if we can aswer some of these questions. . How does Power BI create the forecast? . I found couple of official blog posts on Power BI&#39;s website that were written in 2014 and 2016. The blog written in 2014 was for Power View which has been deprecated but the post still shows up under Power BI&#39;s blog. Other than that, I couldn&#39;t find anything. Given the lack of information, I will assume these posts still describe the current forecasting procedure in Power BI. I will use Python to follw the same procedure and see if we can understand it better. . Which forecasting model is used? . According to this blog, Power BI uses the ETS(AAA) and ETS(AAN) models to model seasonal and non-seasonal data, respectively. I used and described these models in Part 2. But here is a quick non-mathematical recap: . ETS stands for Error, Trend, Seasonality. It is an exponential smoothing model which gives exponential weightage to the historical data to predict the future values. | The data is first decomposed into level, trend, and seasonality. Error is obtained by subtracting the level, trend and and seasonality from the actual values. | Level is the average value over the observed period | Trend is the change in level over this period | Seasonality is the behaviour of the observed quantity from one season to next. e.g. if you have a monthly data for toy sales, sales would be up around holidays from Nov-Jan and then down in the following months. | It&#39;s called exponential smoothing because exponential weights are applied to successive historical values. | Trend, Seasonality and the Error terms can be combined in additive, multiplicative or mixed fashion. . Additive = (Level+Trend) + Seasonality + Error . | . Multiplicative = (Level * Trend) * Seasonality * Error . In addition, the Trend component can be &quot;Damped&quot;. i.e. we &#39;derate&#39; the growth of the trend | . The ETS models follow ETS(XYZ) nomenclature: . X: Error Term. It can be Additive (A), Multiplicative (M) . | Y: Trend Term. It can Additive (A), Multiplicative (M) or Damped (Ad), or No trend (N) . | Z: Seasonality. Additive (A) or Multiplicative(M), or No seasonality (N) . | . | . As the illustration below shows, if the trend is linear, it&#39;s &quot;additive&quot;. If it shows exponential growth, multiplicative model would fit better. | Similarly, if the quantity being studied varies in a stable way relative to average levels, seasonality can be modeled as &quot;additive&quot;. If the change from one season to next, relative to average, can be expressed in terms of % of average, then &quot;multiplicative&quot; model would be a better fit. Read Part 2 to get better understanding of this. There are 36 possible combinations depending on A,M,Ad,N. Only some of these are practical. . | Out of 15 or so possible practical ETS models, Power BI uses two models ETS(AAN), ETS(AAA). You can read more about ETS here . | In general, ETS often provides the most accurate forecasts, even better than the complex neural network models Ref | . . ETS(AAN) . This is &quot;Additive&quot; error, &quot;Additive&quot; trend and &quot;No&quot; seasonality model used when there is no seasonality in the time series. If you are familiar with Holt-Winter&#39;s exponential models, this is Holt&#39;s linear model. | You would use this model when you see a linear trend in the data and no seasonality pattern. | If you are familiar with ARIMA models, this is equivalent to ARIMA(0,2,2) | This is not single exponential smoothing (SES). SES (i.e ETS(ANN)) is used when the data doesn&#39;t have any trend either. | See an example below. It shows Google&#39;s stock performance over time. It has a positive trend but no seasonality. The forecast with an ETS (AAN) model is just a straight line that extends the trend into the future. . . | . ETS(AAA) . This model should be used when there is linear trend and seasonality. | This is the Holt-Winter&#39;s triple exponential smoothing model | See the example below. This data shows quarterly milk production. It has an obvious positive, linear trend and seasonality. Notice how the production jumps up in certain quarters of the year and then drops in following seasons. the height of the peaks in seasons remains same relative to the trend. &quot;Additive&quot; seasonality shows this behaviour. | . . The blog from 2016 written by MS employee mentions that &quot;.. Power BI uses assembly forecaster..Power BI picks the algorithm..forecaster includes exponential smoothing ..&quot;. Not entirely sure if that means if in addition to above ETS models, Power BI uses any other models. . Another possibility is that I know Microsoft uses nimbusml python/mx.net module in its various products including Power BI for machine learning. NimbusML has ssaForecaster() class which uses Single Spectrum Analysis for forecasting. It&#39;s a powerful forecating method but hasn&#39;t been used widely in the industry because of some limitations. . The 2014 blog also mentions that Power View (now in Power BI) does not use ARTXP or ARIMA methods. ARXTP is Autoregressive tree model with cross-prediction. I have no clue what that is. I have discussed ARIMA in part 2. . How does Power BI create the forecast? . Fortunately the 2014 blog sheds some light on how Power BI creates the forecast. To get the better understanding of the methodology, I am going to try to recreate it in Python. . Data: . I am using the same dataset I used in the previous blogs. This data shows quarterly sales of a French retailer. I have divided the numbers by 1,000 to make them easier to read. We have data for 24 quarters and the goal is to forecast sales for the next 4 quarters and total sales for FY2018. I am going to load the dataset in python. . As the plot below shows we have a clear seasonal data with positive trend. So we should be able to use the forecast tool in Power BI. . #collapse_hide #Author: Sandeep Pawar #Version: 1.0 #Date Mar 27, 2020 import pandas as pd import numpy as np import itertools #Plotting libraries import matplotlib.pyplot as plt import seaborn as sns import altair as alt plt.style.use(&#39;seaborn-white&#39;) pd.plotting.register_matplotlib_converters() %matplotlib inline #statistics libraries import statsmodels.api as sm import scipy from scipy.stats import anderson from statsmodels.tools.eval_measures import rmse from statsmodels.tsa.stattools import adfuller from statsmodels.graphics.tsaplots import month_plot, seasonal_plot, plot_acf, plot_pacf, quarter_plot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.holtwinters import ExponentialSmoothing, SimpleExpSmoothing from statsmodels.stats.diagnostic import acorr_ljungbox as ljung from statsmodels.tsa.statespace.tools import diff as diff from statsmodels.tsa.statespace.sarimax import SARIMAX import pmdarima as pm from pmdarima import ARIMA, auto_arima from scipy import signal from scipy.stats import shapiro from scipy.stats import boxcox from scipy.special import inv_boxcox from sklearn.preprocessing import StandardScaler from scipy.stats import jarque_bera as jb from itertools import combinations import fbprophet as Prophet #library to use R in Python import rpy2 from rpy2.robjects import pandas2ri pandas2ri.activate() %load_ext rpy2.ipython import warnings warnings.filterwarnings(&quot;ignore&quot;) np.random.seed(786) pd.plotting.register_matplotlib_converters() def MAPE(y_true, y_pred): &quot;&quot;&quot; %Error compares true value with predicted value. Lower the better. Use this along with rmse(). If the series has outliers, compare/select model using MAPE instead of rmse() &quot;&quot;&quot; y_true, y_pred = np.array(y_true), np.array(y_pred) return np.mean(np.abs((y_true - y_pred) / y_true)) * 100 def residcheck(residuals, lags): &quot;&quot;&quot; Function to check if the residuals are white noise. Ideally the residuals should be uncorrelated, zero mean, constant variance and normally distributed. First two are must, while last two are good to have. If the first two are not met, we have not fully captured the information from the data for prediction. Consider different model and/or add exogenous variable. If Ljung Box test shows p&gt; 0.05, the residuals as a group are white noise. Some lags might still be significant. Lags should be min(2*seasonal_period, T/5) plots from: https://tomaugspurger.github.io/modern-7-timeseries.html &quot;&quot;&quot; resid_mean = np.mean(residuals) lj_p_val = np.mean(ljung(x=residuals, lags=lags)[1]) norm_p_val = jb(residuals)[1] adfuller_p = adfuller(residuals)[1] fig = plt.figure(figsize=(10,8)) layout = (2, 2) ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2); acf_ax = plt.subplot2grid(layout, (1, 0)); kde_ax = plt.subplot2grid(layout, (1, 1)); residuals.plot(ax=ts_ax) plot_acf(residuals, lags=lags, ax=acf_ax); sns.kdeplot(residuals); #[ax.set_xlim(1.5) for ax in [acf_ax, kde_ax]] sns.despine() plt.tight_layout(); print(&quot;** Mean of the residuals: &quot;, np.around(resid_mean,2)) print(&quot; n** Ljung Box Test, p-value:&quot;, np.around(lj_p_val,3), &quot;(&gt;0.05, Uncorrelated)&quot; if (lj_p_val &gt; 0.05) else &quot;(&lt;0.05, Correlated)&quot;) print(&quot; n** Jarque Bera Normality Test, p_value:&quot;, np.around(norm_p_val,3), &quot;(&gt;0.05, Normal)&quot; if (norm_p_val&gt;0.05) else &quot;(&lt;0.05, Not-normal)&quot;) print(&quot; n** AD Fuller, p_value:&quot;, np.around(adfuller_p,3), &quot;(&gt;0.05, Non-stationary)&quot; if (adfuller_p &gt; 0.05) else &quot;(&lt;0.05, Stationary)&quot;) return ts_ax, acf_ax, kde_ax def accuracy(y1,y2): accuracy_df=pd.DataFrame() rms_error = np.round(rmse(y1, y2),1) map_error = np.round(np.mean(np.abs((np.array(y1) - np.array(y2)) / np.array(y1))) * 100,1) accuracy_df=accuracy_df.append({&quot;RMSE&quot;:rms_error, &quot;%MAPE&quot;: map_error}, ignore_index=True) return accuracy_df def plot_pgram(series,diff_order): &quot;&quot;&quot; This function plots thd Power Spectral Density of a de-trended series. PSD should also be calculated for a de-trended time series. Enter the order of differencing needed Output is a plot with PSD on Y and Time period on X axis Series: Pandas time series or np array differencing_order: int. Typically 1 &quot;&quot;&quot; #from scipy import signal de_trended = series.diff(diff_order).dropna() f, fx = signal.periodogram(de_trended) freq=f.reshape(len(f),1) #reshape the array to a column psd = fx.reshape(len(f),1) # plt.figure(figsize=(5, 4) plt.plot(1/freq, psd ) plt.title(&quot;Periodogram&quot;) plt.xlabel(&quot;Time Period&quot;) plt.ylabel(&quot;Amplitude&quot;) plt.tight_layout() path = &#39;https://raw.githubusercontent.com/pawarbi/datasets/master/timeseries/ts_frenchretail.csv&#39; #Sales numbers are in thousands, so I am dividing by 1000 to make it easier to work with numbers, especially squared errors data = pd.read_csv(path, parse_dates=True, index_col=&quot;Date&quot;).div(1_000) data.index.freq=&#39;Q&#39; data.head() train = data.iloc[:-6] test = data.iloc[-6:] train_log = np.log(train[&quot;Sales&quot;]) data.head(10) . . Sales . Date . 2012-03-31 362.0 | . 2012-06-30 385.0 | . 2012-09-30 432.0 | . 2012-12-31 341.0 | . 2013-03-31 382.0 | . 2013-06-30 409.0 | . 2013-09-30 498.0 | . 2013-12-31 387.0 | . 2014-03-31 473.0 | . 2014-06-30 513.0 | . Let&#39;s create the forecast for this data in Power BI first. . Power BI Forecast . . Observations: . Power BI was able to capture the trend and seasonality very well. | I left the &quot;Seasonality&quot; field blank and Power BI still detected quarterly seasonality. | Power BI shows the 95% &quot;Confidence Interval&quot; as gray band by default | You can inspect the forecast by selcting &quot;Show as table&quot; and can also &quot;Export data&quot; | Power BI does not show the forecast values. You have to hover over the line chart to know the values. | Forecast values are not accessible for further calculations or use in measures/calculated columns. | Now let&#39;s see how Power BI creates the forecast as described in the blog. . Creating Validation Window . First a validation window is created. Here is what the blog says: . ...The classical Holt-Winters method finds the optimal smoothing parameters by minimizing the mean sum of squares of errors for predictions in the training window, looking only at predictions that are one-step ahead. However, the errors you get from looking just one step ahead might not be representative of the errors you get when you want a longer horizon forecast. Therefore, to improve long-range forecasting error, we introduced a validation window, which contains the last few points of the training window. Within this validation window, we do not adjust the state at each and every step, but instead, compute the sum of squares of prediction errors for the window as a whole. This has the effect of dampening variation and preserving trend across the validation window... . What this means: In classical forecasting, the parameters of the model are optimized by using all the given data, making forecasts one step at a time and then minimizing the mean sum of square errors (SSE). SSE is calculated by subtracting the 1-step forecasts from the actual values and then squaring them. Errors could be positive or negative so if we add them as is, they may add upto 0. Squaring solves that problem. The issue with this approach is we typically want a long term forecast and using the above approach we cannot assess the accuracy of the forecast for long horizon. To overcome this, in a machine learning model, the data is split into training and test (i.e validation) and model parameters are obtained by using only the training set. The test set is used to assess the accuracy of the model fit. This also helps prevent overfitting (good fit on the training set and poor on the test). . I will split the data into train and test. I will use the first 18 values for training (blue line) and the last 6 for validation (orange line). . Preprocessing the data . It is important that the preprocessing is done after the train/test split and the same preprocessing parameters/steps are applied on both the sets to prevent data leakage. . 1. Missing values: If Power BI detects that any missing values, it will automatically fill in the values using linear interpolation, i.e taking mean of the values before and after the missing value. Power BI performs the imputation as long as the missing values are fewer than 40% of the total observations. . This is a reasonable approach but could potentially be a problem if: . the missing values cannot be imputed with interpolation | missing values/nulls are actually 0&#39;s indicating no sales/production etc. (intermittent time series) | . You should check the data for missingness before doing the forecasting. Also if the data (trend) is not linear, interpolation will result in erroneous data. . To test, I intentionally deleted some of the observations and Power BI still performed the forecasting but did not show the interpolated values in the table. It would be good to know what values were used. If the missing values are close to the end, it will definitely affect the forecast as exponential smoothing gives higher weightage to the recent data. . 2. Detecting Seasonality: Seasonality is the number of seasons in one full time period. If you have a quarterly data, it has 4 seasonal periods in a year. Similarly, monthly has 12, yearly 1 and weekly has 52 seasonal periods. In Python or R, you have to specify the number of seasonal periods. But in Power BI, seasonality is detected automatically for you. As we saw above, I did not have to enter the Seasonality. Below are the steps and description of each step in identifying the seasonality. . De-trending: Trend is the positive or negative change in the level of the series over the observed period. When trend is present, the series is called &quot;non-stationary&quot;. Some forecasting methods such as ARIMA require the time series to be stationary before the method can be applied. ETS method can be used on stationary and non-stationary data. While Power BI does not apply ARIMA model, series is de-trended so we only have seasonality (and error) left in the series. Presence of trend can affect the periodogram (we will see that below). Series can be de-trended by differencing the previous observation. e.g. in our case, the first 3 observations are [362, 385, 432..]. We de-trend the series by subtracting 362 from 385, 385 from 431 and so on. There is no values before 362 so it becomes null. We lose one observation after differencing. New series will be [null, 23, 47,..] | Here are the data before and after differencing. After differencing there is no trend in the data and it only shows the seasonality. . Z-Normalization: Irrespective of the original and de-trended data distribution, data is z-normalized (i.e. standardized) to make the mean 0 and standard deviation 1. This will make the data normally distributed. Note that normality of data is not an essential condition for forecasting neither does it guarantee improvement in mean forecast. Standardization is necessary in many machine learning methods (especially in regression, neurel net based methods, clustering etc.) to make the features scale independent but is not required in forecasting. Normalized data may lead to narrower prediction interval due to stabilized variance. Another benefit of standardization is that forecasting errors are also scaled. Irrespective of the scale of the original data (100 vs 100,000), after normalization Power BI can compare the error metric with an internal benchmark and further refine the model. I don&#39;t know if Power BI does that but it&#39;s a possibility. | We will test the de-trended data and z-normalized data for normality, calculate mean &amp; standard deviation . De-trended data: . - Jarque Bera p-value: 0.22 , Data is Normal - Mean: Sales 20.29 dtype: float64 , - Std Deviation: Sales 77.01 dtype: float64 . Observations . De-trended data actually shows bi-modal normal distribution. Jarque Bera test confirms normality. | The trend is almost flat, except in the first few observations. This actually means we need higher order differencing to remove trend but for the purposes of our analysis, this is good. | De-trended data has a mean of 20.2 and standard deviation of 77. | . Transformed Data . Transform the data with z-normalization to make mean 0, std 1 and remove trend component . - Jarque Bera p-value: 0.2 , Data is Normal - Mean: Sales_X 0.0 dtype: float64 , - Std Deviation: Sales_X 1.0 dtype: float64 . Observations . Transformed data still show the 2 peak bi-modal distribution with a mean of 0 and standard deviation of 1 | . Identify candidate periods from the power spectrum: . So far we have observed the data in time domain but we can also see it in frequency domain to identify prominent frequencies. It&#39;s based on the assumption that it is made up of sine and cosine waves of different frequencies. This helps us detect periodic component of known/unknown frequencies. It can show additional details of the time series that can be easily missed. We do it with a Periodogram . | Rank candidate periods: . Pearson and Spearman auto-correlations are computed for the transformed data. Significant lags in auto-correlation are matched with those found in the frequency analysis. If multiple peaks are found, the lags are arranged and peak with the highest correlation value is used for seasonality. . Auto-correlation is the correlation of the time series with its past values. e.g. to calculate the correlation at 1st lag, time series is shifted by 1 observation and correlation is calculated. Process is repeated for many past versions of itself. If auto-correlation is significant at a particular lag value &#39;k&#39;, it shows that the observations from k periods ago affect the time series significantly. You can read more here. . In the ACF plot any value that is outside the blue band shows significant lag. As we can see below, only the lag at k=4 is significant (~0.75). This matches with the observation from periodogram. . Thus, Power BI can now confirm that this series has seasonality of 4, phew!. I am glad Power BI does all this automatically and fast. . | Notes about seasonality: . Power BI recommends not using very long data as higher order lags have less information and can affect Pearson correlation calculation. Pearson correlation shows linear relationship between two variables. If the data is very log, the linear assumption may not remain valid. | Power BI recommends at least 3-4 seasons worth of data for seasonality detection to work properly. This means for quarterly data &gt;12 values, &gt;36 for monthly, &gt;156 for weekly data | You can also specify the seasonality manually. I highly recommend entering the seasonality manually because I have found that automatic seasonality may not always work as intended. I will show an example below. | . I randomly grabbed a monthly time series from the M3 competition dataset. M3 competition dataset is often used in research as a benchmark for testing various forecasting methods. M3 has 3003 time series of various seasonalities. For this time series, seasonality = 12 and the goal is to forecast next 12 months. I first created the forecast without specifying the seasonality. As you can see in the clip below, the forecast looks weird and definitely not what you would expect. After specifying seasonality =12, the forecast looks much more reasonable. Reducing the length of the series, as recommended by Power BI, did not help either. Automatic seasonality detection is not as robust as we would like. It&#39;s also possible that Power BI&#39;s algorithm is thrown off by the sudden peak in year 1985 which could be an outlier. . Forecasting . To compare the forecasting accuracy, I created a forecast in Power BI based on first 18 values (training set) and forecasted the last 6 values (validation). To be consistent, I entered 4 as seasonality. Table below shows the actual values, forecast, 95% upper and lower CI. . . Sales forecastValue confidenceHighBound confidenceLowBound . Date . 2016-09-30 773 | 813.0 | 864.1 | 761.8 | . 2016-12-31 592 | 636.1 | 689.4 | 582.9 | . 2017-03-31 627 | 725.5 | 797.7 | 653.4 | . 2017-06-30 725 | 785.5 | 873.8 | 697.1 | . 2017-09-30 854 | 900.7 | 1012.3 | 789.1 | . 2017-12-31 661 | 702.9 | 797.0 | 608.9 | . Forecast Accuracy: . There are many forecast model accuracy metrics. The two most common are RMSE (Root Mean Square Error) and % MAPE (Mean Absolute Percentage Error). You can read more about it in &quot;Evaluation Metric&quot; section in Part 2. In general, if the data has no outliers and 0 values, RMSE is a good metric to use. It can be thought of as the avg error in the mean forecast. While there are more robust and scale independent measures that can be used, we will use RMSE for comparing &amp; evaluating the performance. The smaller the RMSE and MAPE the better. . e.g. for Power BI forecast, RSME = sqrt (avg[ (773-813)^2 + (592-636.1)^2 + (627-725.5)^2 + (854-900.7)^2 + (661-702)^2)]) . . %MAPE RMSE . 0 8.1 | 58.9 | . Observations: . Power BI did an excellent job of capturing the trend and seasonality in the data. | Power BI forecast runs parallel to the actual values by almost the same margin, this may indicate some bias in the forecast | %MAPE is 8% and RMSE is 59. Thus, Power BI forecast, on average, in +/-8% of actual values or in terms of numbers +/- 59. For comaprison purposes, the standard deviation of the data is 111 so this is a really good forecast. | Actual value is outside the CI band in Q1 2017. I will discuss CI little later in the post, first we focus on mean forecasts. | ETS model in Python . Pyhton (and R) has two implimentations of the exponential smoothing methods. Holt-Winter&#39;s (HW) and ETS. ETS has a statistical framework, HW doesnt and HW can be thought of as a subset of ETS. . For HW in Python, you use statsmodels.tsa.holtwinters.ExponentialSmoothing() class and for state space ETS methods you use statsmodels.tsa.statespace.exponential_smoothing.ExponentialSmoothing() . In R, for HW use hw() and for ETS use ets() from forecast library. . Note: In general, although the ETS(AAA) model is equivalent to Holt-Winter&#8217;s additive linear model, and should give same answers, ETS almost always performs better because of how the parameter initialization and optimization works. You should experiment with HW but ETS more than likely will give more accurate results. . I will create the ETS(AAA) model in Python. . ETS(AAA) . ets1=(sm.tsa.statespace.ExponentialSmoothing( train, #Using training set , first 18 values) trend=True, #Trend is present initialization_method= &#39;concentrated&#39;, seasonal=4, #Quarterly data, seasonality=4 damped_trend=False). #Turn of Damped fit()) py_fc1 = ets1.forecast(6) #forecast next 6 values . %MAPE RMSE . 0 6.4 | 47.0 | . Observations: . ETS(AAA) forecast created in Python tracks the actual values much more closely | RMSE is 47, smaller than Power BI (58.9). Avg MAPE also better by 2.4 pct (6.4% vs. 8%) | One of the observations I noted earlier was that the trend looks more exponential than linear. The &#39;additive&#39; trend component can only capture the linear trends and hence not suitable in this case. The more accurate model would be ETS(MAM). Also, if you closely look at the first plot (top of the page) where I plotted the data with 4Q rolling mean, you can clearly see that the orange line is levelling off towards the end. So we not only have an exponential trend it is slowing at the end. . We can make the exponential trend linear by taking a &#39;log&#39; of the observations and setting damped_trend=True. New model is ETS(A,Ad,A) . ETS(A,Ad,A) . ets_model=sm.tsa.statespace.ExponentialSmoothing(np.log(train), trend=True, initialization_method= &#39;heuristic&#39;, seasonal=4, damped_trend=True).fit() py_fc2 = ets_model.get_forecast(6) results_df=(py_fc2.summary_frame( alpha=0.05).apply( np.exp)[[&quot;mean&quot;,&quot;mean_ci_lower&quot;,&quot;mean_ci_upper&quot;]]) . %MAPE RMSE . 0 5.1 | 40.9 | . Observations: . ETS(A,Ad,A) matches the actual values even better than the earlier ETS(AAA) model | RMSE (40.9) and %MAPE (5%) are better than the ETS(AAA) and Power BI forecast. | Recommendations . The main-take away from the above exercise is that Power BI can create fairly accurate forecasts but has limitations: . The trend and seasonal components have to be linear. If you have exponential and/or damped trend, you may not get accurate results | Automatic detection of seasonality can be spotty. It&#39;s best to manually enter the seasoanlity in the Forecast dialog box in Power BI | Power BI uses two ETS models (AAN) and (AAA). It chooses the method based on its own algorithm. | ETS method has its own limitations. While it can be more robust to outliers compared to ARIMA, location of the outlier (close to the end of the series vs earlier) can throw off the forecast. Power BI detects outliers by monitoring local trend and automatically adjusting forecast accordingly. | ETS cannot be used for high frequency time series such as daily, sub-daily (minute, hourly) data. In fact, weekly data is also pushing the envelope a little bit. The reason for that is in high-frequency data such as weekly you may have multiple seasonalities. For example, if you have weekly sales data, it&#39;s possible that sales may be higher closer to month end (&#39;week of the month&#39;), plus some months may have higher sales than other (&#39;month of year&#39; seasonality). We cannot enter mutiple seasonality values. Thus do not use Power BI forecast for anything other than monthly, quarterly, semi-annual, yearly data, you can use weekly data but with caution. If you have high frequency data you will need to try TBATS, deep-learning, Facebook Prophet models (see part 2). If you do use Power BI forecast for high-frequency data, it will likley use the (AAN) model and give you a straight line with a trend. | Use data with at least 3-4 full seasonal cycles. That translates to &gt;36 for monthly, 12 for quarterly data. | Do not use too much data. While Power BI doesn&#39;t mention what&#39;s too much, I would recommend using only the relevant 5 cycle data if available. | Power BI does not provide model evaluation metric. You can &#39;estimate&#39; the model accuracy by the method described above. Let&#39;s say your forecast horizon is 12 months. Enter 12 in the &#39;Ignore Last&#39; and create a forecast for 12 months. Use the RSME &amp; %MAPE to evaluate the forecast accuracy. While it doesn&#39;t guarantee true forecast accuracy, it at least gives you an estimation. If you don&#39;t have enough data, use the Cross-Validation approach I described in Part 2 | Power BI imputes missing values by linear iterpolation. If your data has non-linear trend, too many missing values (&gt;40%), missing values close to the end of the time series, it&#39;s better to clean up the data yourself than letting Power BI do it automatically. | If your data has many 0&#39;s (no sales, no production etc) which is usually the case for new products or slow moving products (i.e intermittent demand), do not use Power BI forecast. ETS should not be used for intermittent time series. Croston&#39;s method, deep-learning models can be used in that case. | ETS cannot use additional variables (exogenous variables) to improve the forecast. For example, if you sell more products when it&#39;s sunny, warm outside, on weekends, holidays, sport events etc. If the time series has high correlation with such events, you can include them in the forecast model for better accuracy. SARIMAX, deep-learning, gradient boosting models can be used for that. AutoML in Azure ML has built in holiday calendar and can include all these variables in the forecast. | An important and essential part of any statistical/machine learning model is model diagnostics. We want to make sure the model is valid, accurate, doesn&#39;t overfit and has extracted all the information from the available data. It is usually done by residual diagnsotics. Power BI doesn&#39;t provide any model diagnostics or parameter values etc. I am going to skip that part here but you can read more in Part 2. | Forecast Uncertainty, Confidence Interval or Prediction Interval . The forecast we obtain in Power BI is the mean forecast. Time series is a statistical process and thus has probability distribution. When we create a forecast, we are estimating the mean of that forecast distribution, i.e 50% probability values. What about the other percentiles? . Power BI lets you choose the Confidence Interval (CI). You can choose from 75%, 80%, 85%, 95%, 99%. The 2014 blog talks about using confidence interval for assessing forecast accuracy. . &#39;...The shaded area shows you the range of predicted values at different confidence levels...&#39; . I think Power BI is calculating the Prediction Interval (PI) based on above description and not CI. You are actually choosing the confidence values for the PI. Let me explain the difference between the two and why it is important. . When you calculate CI, you are creating a confidence interval around the mean forecast. For example, the first mean forecast above is 813, upper bound is 864 and lower bound is 762. If it is CI, it does not mean the forecast will be between 864 and 762, 95% of the time. What it means is that based on the optimized parameters used in the model, limited sample size etc., the mean will be between 864 and 761. It&#39;s the error in estimating the mean. It&#39;s true that the band gives you an estimation of the range of mean values but it&#39;s not the range of the predicted values if it is CI. Prediction intervals (PI) are wider than CI. CI&#39;s are used to estimate error in a parameter of the population , e.g. mean, median, percentile, even PI values. It&#39;s not a range of predicted values. . I will give you an example, let&#39; say you work in an office where 1000 people work and you are asked what&#39;s the average work experience in years for the company. You go and ask 25 people about their years of experience, take an average and come up with 12.5 and standard dev of 2.3. Because you only asked 25 people, you know there is an error. You can estimate that error using CI and it is [11.6, 13.4] at 95%. This means the &quot;mean&quot; will be between 11.6 and 13.4 95% of the time but the actual &quot;range&quot; of experience would be far greater depending on the distribution. You might have people with 1 month experience to 30+ years experience, that&#39;s PI. Note that PI can be close to CI but not always. CI doesn&#39;t take model uncertainty into account and has little to no value in practical forecasting. . . Based on the 1 line description in the blog and the tests I have done, I think Power BI is calculating the PI, at least I hope so. This is why Power BI should release more documentation on this topic. . How is PI calculated? . Hyndman has provided calculations for estimating the PI. It assumes the residuals are normal, which may not always be the case. Simulations can be used for better results as it doesn&#39;t assume distribution of the residuals. I calculated the PI using simulation in Part 2 as [923, 691] which is slightly wider than the CI from Power BI [864,762]. . Also note that the PI &amp; CI grow with the forecast horizon. The farther you are into the future, the more uncertainty you have in the estimates. . Below I calculated the PI using R. As you can see they are slightly wider than Power BI&#39;s range but close. . %%R -i train -o fets library(fpp2) r_train &lt;- ts(train$Sales, start=c(2012,01), frequency=4) fets &lt;- r_train %&gt;% ets() %&gt;% forecast(h=6, simulate=TRUE, level= 95) %&gt;% summary() . Point Forecast Lo 95 Hi 95 . 0 799.7 | 733.7 | 863.9 | . 1 631.1 | 563.9 | 702.3 | . 2 724.0 | 635.9 | 821.3 | . 3 771.0 | 665.4 | 883.7 | . 4 878.5 | 745.6 | 1023.9 | . 5 691.8 | 578.6 | 817.8 | . Implementation in Power BI with Python . Power BI created a reasonable forecast but it can be improved. If you want to further improve this forecast, you can use the &quot;Ensemble Forecast&quot; discussed in Part 2. . Perhaps the biggest limitation of forecasting in Power BI is not being able to access the forecast values for further calculations or reporting. It doesn&#39;t even show the forecast on the line chart. . We can use this Python code in Power BI for forecasting. Watch the video below. I have uploaded this Power BI file to my Github for your reference. . You need statsmodels, numpy, pandas libraries installed. . #hide_output # &#39;dataset&#39; holds the input data for this script import numpy as np from statsmodels.tsa.statespace.exponential_smoothing import ExponentialSmoothing h = 4 #forecast horizon model=ExponentialSmoothing(np.log(dataset[&quot;Sales&quot;]),trend=True,initialization_method= &#39;heuristic&#39;,seasonal=4,damped_trend=True).fit() fc=np.exp(model.predict(0,len(dataset)+(h-1))) dates=pandas.date_range(start=&#39;2012-03-31&#39;, periods= len(dataset)+h , freq=&#39;Q&#39;) df=pandas.DataFrame({&#39;dates&#39;:dates,&#39;Actual&#39;:dataset[&quot;Sales&quot;],&#39;Forecast&#39;:fc}) . We are using the same Python model we used earlier but we have to create a new dataframe for the additional values created by the forecast. Note that in this case, I am also obtaining the fittedvalues to inspect the fit over the data. If you only care about the forecast, change the code to model.forecast(4) . DAX for extracting forecast Sales . %%html Forecast_Sales&amp;nbsp;=&lt;br&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;forecast[Forecast]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;forecast[type]&amp;nbsp;==&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;Forecast&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br&gt; . Forecast_Sales&nbsp;=CALCULATE&nbsp;(&nbsp;VALUES&nbsp;(&nbsp;forecast[Forecast]&nbsp;),&nbsp;forecast[type]&nbsp;==&nbsp;&quot;Forecast&quot;&nbsp;) . Note: If you have not installed or used Python in Power BI before, read the documentation first. Also read these performance tips by David Eldersveld . . Tip: I recommend creating virtual environments and using (e.g. pynenv) for Power BI specific virtual environment . . Python in Power BI Limitations: . If you are not familiar with Python or don&#39;t have access to Python at work, this obvisouly won&#39;t work for you | For Python scripts to work properly in Power BI service, all data sources need to be set to &quot;Public&quot;. That&#39;s a BIG NO. | If you use Pyhon script in Power Query, you have to use a personal gateway. That may not be a problem but if you are using dataflow in your report, this solution won&#39;t work as dataflow needs Enterprise Gateway | Python script cannot be used on merged queries, you will get an error. You can merge after the Python script but not before. | The exponential_smoothing() can resturn confidence interval (see Part 2) but as we discussed above, it&#39;s of no practical use. It does not calculate prediction interval. We can use simulation to get prediction interval but it takes few minutes so can&#39;t practially be used as a Python script in Power BI. | Using R in Power BI . Leila Etaati has covered forecasting using R in great details, so I won&#39;t cover it here. But personally I find the forecast(), fpp2(), fable() libraries in R to be much faster, easier to work with and they do return prediction interval. Plus, unlike Python,ets() can be used for &quot;multiplicative&quot; models. . Using Excel . Excel has FORECAST.ETS() formula which uses ETS(AAA) method to create the forecast, just like Power BI. Power BI could be using the same algorithm under the hood because the options and results are very identical. Forecast Sheet under &quot;Data&quot; can be used for creating forecast with a UI. You can import this excel in Power BI and create a line chart almost exactly same as Power BI. . ETS can&#39;t be used for high-frequency data anyway so you would only need to update the Excel sheet once a month, quarter, year etc. so it shouldn&#39;t be a big problem. You can also use Power Automate to refresh the Excel on a schedule. . If you are ok with the limitations of ETS(AAA) model discussed above or find that ETS(AAA) can produce accurate results for your data, I think this is the easiest method to show forecast in Power BI. . . Other Options . SQL: If you are using SQL as a datasource, you can use RevoScalePy/RevoScaleR in SQL to serve any machine learning model including forecasting . KNIME: KNIME is an open-source tool used for productionizing data science projects. It&#39;s free, easy to use, can be used for ETL and the best part is that it has a Power BI integration. You can create a forecasting model (it&#39;s own ETS, ARIMA nodes or R/Python) and push the results to Power BI. If you need a more complex model, this is a great option. I will cover this in a future blog post. . Azure ML: Azure ML Service has a direct integration with Power BI. You can create the model in Azure Notebook, Designer or AutoML. You can see an example here. In the next blog I will cover this in more detail. . Custom Visuals: There are some custom visuals in the Apps gallery but I generally never use custom visuals for data privacy and dependency reasons. . Summary . It&#39;s easy to create a forecast in Power BI but it is severely limited | You cannot show the forecasted values on the line chart | You do not know what preprocessing Power BI may have applied to the data (imputation, outlier removal etc.) | You cannot plot multiple columns or use second Y axis when Forecast is used | You cannot use the &#39;Legend&#39; in the line chart with Forecast. Only works in Line Chart and not in &#39;Line &amp; Stacked column chart&#39; | You cannot extract the forecasted values for use in measures or calculated columns | Forecast can be exported as an excel file, re-imported to use the forecast but that would defeat the purpose of automatic forecasting | Power BI uses two ETS methods (AAN) and (AAA) which can be used for additive components but not when the trend, seasonality are non-linear | Power BI forecast should not be used on high-frequency data such as daily, hourly (even weekly if it exhibits multiple seasonalities) | Use at least data worth 3-4 seasons (&gt;12 for quarterly, &gt;36 for monthly data) | Power BI should provide more documentation on confidence interval and clarify if it is confidence interval or prediction interval. Until then, use it with caution. | If you do use Power BI&#39;s forecast tool, create a forecast first for time greater than or equal to your forecast horizon, use the same number in the &#39;Ignore Last&#39; points, assess the fit and calculate RMSE. If the fit looks good, you can use it for final forecast. | Always enter the seasonality manually | Do not use Power BI forecast on intermittent data with several 0&#39;s. | Excel might provide the easiest way to create an ETS(AAA) forecast. But has the same limitations as discussed above for ETS in general. | You can use Pyhton and R for generating forecasts in and outside of Power BI. R can give mean forecast and the prediction interval. For Pyhton, use simulations to generate PI. | References: . Forecasting: Principles and Practice, by Prof. Hyndman | Time Series Analysis and its Applications, by Robert Shumway | Time Series Analysis and Forecasting, by Montgomery &amp; Jennings | Introduction to Time Series and Analysis, by Brockwell | Practial Time Series Forecasting with R, by Galit Shmueli 6. https://homepage.univie.ac.at/robert.kunst/pres09_prog_turyna_hrdina.pdf |",
            "url": "https://pawarbi.github.io/blog/forecasting/python/powerbi/forecasting_in_powerbi/2020/04/24/timeseries-powerbi.html",
            "relUrl": "/forecasting/python/powerbi/forecasting_in_powerbi/2020/04/24/timeseries-powerbi.html",
            "date": " • Apr 24, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Time series Forecasting in Python & R, Part 2 (Forecasting )",
            "content": "Overview . In Part 1, I did exploratory data analysis of sales time series of a French retailer. In this blog I will apply various time series models in Python and R to forecast sales for the next 4 quarters. The forecasting methods I will cover are: . Seasonal Naive | Triple Exponential Smoothing (Holt Winter&#39;s) | ETS (State Space Error Trend Seasonality) | SARIMA | Facebook Prohet | Ensemble Forecast | . For each of these models, I will provide a short description for intuitive understanding of these methods and give references for more academic explanation. For any forecasting model, the general steps are as below. . Forecasting Steps . EDA | Forecast on test set | Evaluate the forecast Use appropriate evaluation metric (%MAPE, RMSE, AIC) | Plot the forecast against train and test data set | . | Check residuals. . Plot residuals, plot ACF/PACF and Q/Q plots | Conditions A, B below are essential and C,D are useful. Residuals should be: . Uncorrelated | Have zero (or close to zero) mean | Constant variance | Normally distributed | | First two ensure that there is no more information that can be extracted from the data, while the bottom two keep the variability in the point forecast narrow . | . | Select model(s) Forecast future series | Prediction Interval | . | Evaluation Metric . We evaluate the forecasting model by comparing the fitted &amp; predicted values against the actual values in training and test sets. Note that residuals are the difference between training data and fitted values, while forecast error is the difference between test data and predicted values. We use residuals to check performance of the model while errors for checking accuracy/uncertainty of the future forecast. . As a general rule, if the data has no outliers RMSE (Root Mean Square Error) is a good metric to use. %MAPE (Mean Absolute Percentage Error) provides a more inutitive understanding as it is expressed in percentage. We do not use %MAPE if the series is intermittent to avoid division by zero. Note that both these measures are not scale independent but to keep things simple I will use RSME and MAPE. . . Importing libraries . #collapse-hide #Author: Sandeep Pawar #Version: 1.0 #Date Mar 27, 2020 import pandas as pd import numpy as np import itertools #Plotting libraries import matplotlib.pyplot as plt import seaborn as sns import altair as alt plt.style.use(&#39;seaborn-white&#39;) pd.plotting.register_matplotlib_converters() %matplotlib inline #statistics libraries import statsmodels.api as sm import scipy from scipy.stats import anderson from statsmodels.tools.eval_measures import rmse from statsmodels.tsa.stattools import adfuller from statsmodels.graphics.tsaplots import month_plot, seasonal_plot, plot_acf, plot_pacf, quarter_plot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.holtwinters import ExponentialSmoothing, SimpleExpSmoothing from statsmodels.stats.diagnostic import acorr_ljungbox as ljung from statsmodels.tsa.statespace.tools import diff as diff from statsmodels.tsa.statespace.sarimax import SARIMAX import pmdarima as pm from pmdarima import ARIMA, auto_arima from scipy import signal from scipy.stats import shapiro from scipy.stats import boxcox from scipy.special import inv_boxcox from sklearn.preprocessing import StandardScaler from scipy.stats import jarque_bera as jb from itertools import combinations import fbprophet as Prophet #library to use R in Python import rpy2 from rpy2.robjects import pandas2ri pandas2ri.activate() import warnings warnings.filterwarnings(&quot;ignore&quot;) np.random.seed(786) . . Library versions . #Printing library versions print(&#39;Pandas:&#39;, pd.__version__) print(&#39;Statsmodels:&#39;, sm.__version__) print(&#39;Scipy:&#39;, scipy.__version__) print(&#39;Rpy2:&#39;, rpy2.__version__) print(&#39;Numpy:&#39;, np.__version__) . Pandas: 0.25.0 Statsmodels: 0.11.0 Scipy: 1.4.1 Rpy2: 2.9.4 Numpy: 1.18.2 . Various functions used . Below are some of the custom functions I wrote for forecast accuracy, gridsearching, residual diagnostics. . def MAPE(y_true, y_pred): &quot;&quot;&quot; %Error compares true value with predicted value. Lower the better. Use this along with rmse(). If the series has outliers, compare/select model using MAPE instead of rmse() &quot;&quot;&quot; y_true, y_pred = np.array(y_true), np.array(y_pred) return np.mean(np.abs((y_true - y_pred) / y_true)) * 100 def HWGrid(train, test, seasonal_periods): &quot;&quot;&quot; Author: Sandeep Pawar twitter: @PawarBI Functions returns a dataframe with parameters of the Holt-Winter&#39;s method and corresponding train &amp; test evaluation scores. It also does a quick check of the residuals using Ljung-Box test and Shapiro test for normality. Residuals must be uncorrelated. train: (pandas series) - Training data test: (pandas series) - Test data Seasonal_periods: int - No of seasonas in the time period. e.g. 4 for Quarterly, 12 for Monthly, 52 for Weekly data &quot;&quot;&quot; trend = [&#39;add&#39;,&#39;mul&#39;] seasonal = [&#39;add&#39;,&#39;mul&#39;] damped = [False, True] use_boxcox = [False, True, &#39;log&#39;] params = itertools.product(trend,seasonal,damped,use_boxcox) result_df = pd.DataFrame(columns=[&#39;Trend&#39;, &#39;Seasonal&#39;, &#39;Damped&#39;, &#39;BoxCox&#39;,&#39;AICc Train&#39;, &#39;%MAPE_Train&#39;, &#39;RMSE_Train&#39;, &#39;%MAPE_Test&#39;, &#39;RMSE_Test&#39;, &quot;Resid_LJ&quot;, &quot;Resid_Norm&quot;,&quot;Resid_mean&quot; ]) for trend,seasonal,damped,use_boxcox in params: model = ExponentialSmoothing(train, trend=trend, damped=damped, seasonal=seasonal, seasonal_periods=seasonal_periods).fit(use_boxcox=use_boxcox) mape1=MAPE(train,model.fittedvalues) rmse1=rmse(train,model.fittedvalues) mape2=MAPE(test,model.forecast(len(test))) rmse2=rmse(test,model.forecast(len(test))) aicc1 = model.aicc.round(1) lj_p_val = np.mean(ljung(x=model.resid, lags=10)[1]) norm_p_val = jb(model.resid)[1]#shapiro(model.resid)[1] lj = &quot;Uncorrelated&quot; if lj_p_val &gt; 0.05 else &quot;Correlated&quot; norm = &quot;Normal&quot; if norm_p_val &gt; 0.05 else &quot;Non-Normal&quot; result_df = result_df.append({&#39;Trend&#39;:trend , &#39;Seasonal&#39;: seasonal , &#39;Damped&#39;:damped , &#39;BoxCox&#39;:use_boxcox , &#39;%MAPE_Train&#39;:np.round(mape1,2) , &#39;RMSE_Train&#39;:np.round(rmse1,1) , &#39;AICc Train&#39;:aicc1 , &#39;%MAPE_Test&#39;:np.round(mape2,2) , &#39;RMSE_Test&#39;:np.round(rmse2,1) , &#39;Resid_LJ&#39; :lj , &#39;Resid_Norm&#39;:norm , &#39;Resid_mean&#39;:np.round(model.resid.mean(),1)} , ignore_index=True, sort=False) return result_df.sort_values(by=[&quot;RMSE_Test&quot;, &quot;%MAPE_Test&quot;,&quot;RMSE_Train&quot;,&quot;%MAPE_Train&quot;]).style.format({&quot;%MAPE_Train&quot;: &quot;{:20,.2f}%&quot;, &quot;%MAPE_Test&quot;: &quot;{:20,.2f}%&quot;}).highlight_min(color=&#39;lightgreen&#39;) . Calculating cross-validation score for Holt-Winter&#39;s method in Python . def hw_cv(series, seasonal_periods, initial_train_window, test_window): from statsmodels.tools.eval_measures import rmse import warnings warnings.filterwarnings(&quot;ignore&quot;) &quot;&quot;&quot; Author: Sandeep Pawar Date: 4/15/2020 Ver: 1.0 Returns Rolling and Expanding cross-validation scores (avg rmse), along with model paramters for Triple Exponential Smoothing method. Expanding expands the training set each time by adding one observation, while rolling slides the training and test by one observation each time. Output shows parameters used and Rolling &amp; Expanding cv scores. Output is in below order: 1. Trend 2. Seasonal 3. Damped 4. use_boxcox 5. Rolling cv 6. Expanding cv Requirements: Pandas, Numpy, Statsmodels, itertools, rmse series: Pandas Series Time series seasonal_periods: int No of seasonal periods in a full cycle (e.g. 4 in quarter, 12 in monthly, 52 in weekly data) initial_train_window: int Minimum training set length. Recommended to use minimum 2 * seasonal_periods test_window: int Test set length. Recommended to use equal to forecast horizon e.g. hw_cv(ts[&quot;Sales&quot;], 4, 12, 6 ) Output: add add False False R: 41.3 ,E: 39.9 Note: This function can take anywhere from 5-15 min to run full output &quot;&quot;&quot; def expanding_tscv(series,trend,seasonal,seasonal_periods,damped,boxcox,initial_train_window, test_window): i = 0 x = initial_train_window t = test_window errors_roll=[] while (i+x+t) &lt;len(series): train_ts=series[:(i+x)].values test_ts= series[(i+x):(i+x+t)].values model_roll = ExponentialSmoothing(train_ts, trend=trend, seasonal=seasonal, seasonal_periods=seasonal_periods, damped=damped).fit(use_boxcox=boxcox) fcast = model_roll.forecast(t) error_roll = rmse(test_ts, fcast) errors_roll.append(error_roll) i=i+1 return np.mean(errors_roll).round(1) def rolling_tscv(series,trend,seasonal,seasonal_periods,damped,boxcox,initial_train_window, test_window): i = 0 x = initial_train_window t = test_window errors_roll=[] while (i+x+t) &lt;len(series): train_ts=series[(i):(i+x)].values test_ts= series[(i+x):(i+x+t)].values model_roll = ExponentialSmoothing(train_ts, trend=trend, seasonal=seasonal, seasonal_periods=seasonal_periods, damped=damped).fit(use_boxcox=boxcox) fcast = model_roll.forecast(t) error_roll = rmse(test_ts, fcast) errors_roll.append(error_roll) i=i+1 return np.mean(errors_roll).round(1) trend = [&#39;add&#39;,&#39;mul&#39;] seasonal = [&#39;add&#39;,&#39;mul&#39;] damped = [False, True] use_boxcox = [False, True, &#39;log&#39;] params = itertools.product(trend,seasonal,damped,use_boxcox) for trend,seasonal,damped,use_boxcox in params: r=rolling_tscv(data[&quot;Sales&quot;], trend, seasonal, 4, damped, use_boxcox, 12,4) e=expanding_tscv(data[&quot;Sales&quot;], trend, seasonal, 4, damped, use_boxcox, 12,4) result = print(trend, seasonal, damped, use_boxcox,&quot; R:&quot;, r,&quot; ,E:&quot;, e) return result . Function for residual diagnostics . def residcheck(residuals, lags): &quot;&quot;&quot; Function to check if the residuals are white noise. Ideally the residuals should be uncorrelated, zero mean, constant variance and normally distributed. First two are must, while last two are good to have. If the first two are not met, we have not fully captured the information from the data for prediction. Consider different model and/or add exogenous variable. If Ljung Box test shows p&gt; 0.05, the residuals as a group are white noise. Some lags might still be significant. Lags should be min(2*seasonal_period, T/5) plots from: https://tomaugspurger.github.io/modern-7-timeseries.html &quot;&quot;&quot; resid_mean = np.mean(residuals) lj_p_val = np.mean(ljung(x=residuals, lags=lags)[1]) norm_p_val = jb(residuals)[1] adfuller_p = adfuller(residuals)[1] fig = plt.figure(figsize=(10,8)) layout = (2, 2) ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2); acf_ax = plt.subplot2grid(layout, (1, 0)); kde_ax = plt.subplot2grid(layout, (1, 1)); residuals.plot(ax=ts_ax) plot_acf(residuals, lags=lags, ax=acf_ax); sns.kdeplot(residuals); #[ax.set_xlim(1.5) for ax in [acf_ax, kde_ax]] sns.despine() plt.tight_layout(); print(&quot;** Mean of the residuals: &quot;, np.around(resid_mean,2)) print(&quot; n** Ljung Box Test, p-value:&quot;, np.around(lj_p_val,3), &quot;(&gt;0.05, Uncorrelated)&quot; if (lj_p_val &gt; 0.05) else &quot;(&lt;0.05, Correlated)&quot;) print(&quot; n** Jarque Bera Normality Test, p_value:&quot;, np.around(norm_p_val,3), &quot;(&gt;0.05, Normal)&quot; if (norm_p_val&gt;0.05) else &quot;(&lt;0.05, Not-normal)&quot;) print(&quot; n** AD Fuller, p_value:&quot;, np.around(adfuller_p,3), &quot;(&gt;0.05, Non-stationary)&quot; if (adfuller_p &gt; 0.05) else &quot;(&lt;0.05, Stationary)&quot;) return ts_ax, acf_ax, kde_ax . Function for calculating RMSE &amp; %MAPE . def accuracy(y1,y2): accuracy_df=pd.DataFrame() rms_error = np.round(rmse(y1, y2),1) map_error = np.round(np.mean(np.abs((np.array(y1) - np.array(y2)) / np.array(y1))) * 100,1) accuracy_df=accuracy_df.append({&quot;RMSE&quot;:rms_error, &quot;%MAPE&quot;: map_error}, ignore_index=True) return accuracy_df . Importing Data . path = &#39;https://raw.githubusercontent.com/pawarbi/datasets/master/timeseries/ts_frenchretail.csv&#39; #Sales numbers are in thousands, so I am dividing by 1000 to make it easier to work with numbers, especially squared errors data = pd.read_csv(path, parse_dates=True, index_col=&quot;Date&quot;).div(1_000) data.index.freq=&#39;Q&#39; data.head() . Sales . Date . 2012-03-31 362.0 | . 2012-06-30 385.0 | . 2012-09-30 432.0 | . 2012-12-31 341.0 | . 2013-03-31 382.0 | . data.index . DatetimeIndex([&#39;2012-03-31&#39;, &#39;2012-06-30&#39;, &#39;2012-09-30&#39;, &#39;2012-12-31&#39;, &#39;2013-03-31&#39;, &#39;2013-06-30&#39;, &#39;2013-09-30&#39;, &#39;2013-12-31&#39;, &#39;2014-03-31&#39;, &#39;2014-06-30&#39;, &#39;2014-09-30&#39;, &#39;2014-12-31&#39;, &#39;2015-03-31&#39;, &#39;2015-06-30&#39;, &#39;2015-09-30&#39;, &#39;2015-12-31&#39;, &#39;2016-03-31&#39;, &#39;2016-06-30&#39;, &#39;2016-09-30&#39;, &#39;2016-12-31&#39;, &#39;2017-03-31&#39;, &#39;2017-06-30&#39;, &#39;2017-09-30&#39;, &#39;2017-12-31&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;Date&#39;, freq=&#39;Q-DEC&#39;) . Train Test Split: . Part 1 on EDA covers this in detail. I will be using both typical train/test split and cross-validation for training &amp; evaluation. . #Split into train and test train = data.iloc[:-6] test = data.iloc[-6:] #forecast horizon h = 6 train_length = len(train) print(&#39;train_length:&#39;,train_length, &#39; ntest_length:&#39;, len(test) ) #Creating BxCox transformed train &amp; test to be used later train_bcox, bcox_lam = boxcox(train[&quot;Sales&quot;]) print(&quot;BoxCox parameter to linearize the series:&quot;, bcox_lam.round(2)) test_bcox = boxcox(test[&quot;Sales&quot;], lmbda=bcox_lam) train_log = np.log(train[&quot;Sales&quot;]) . train_length: 18 test_length: 6 BoxCox parameter to linearize the series: -0.21 . #collapse-hide #Create line chart for Training data. index is reset to use Date column train_chart=alt.Chart(train.reset_index()).mark_line(point=True).encode( x=&#39;Date&#39;, y=&#39;Sales&#39;, tooltip=[&#39;Date&#39;, &#39;Sales&#39;]) #Create Rolling mean. This centered rolling mean rolling_mean = alt.Chart(train.reset_index()).mark_trail( color=&#39;orange&#39;, size=1 ).transform_window( rolling_mean=&#39;mean(Sales)&#39;, frame=[-4,4] ).encode( x=&#39;Date:T&#39;, y=&#39;rolling_mean:Q&#39;, size=&#39;Sales&#39; ) #Add data labels text = train_chart.mark_text( align=&#39;left&#39;, baseline=&#39;top&#39;, dx=5 # Moves text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Sales:Q&#39; ) #Add zoom-in/out scales = alt.selection_interval(bind=&#39;scales&#39;) #Combine everything (train_chart + rolling_mean +text).properties( width=600, title=&quot;French Retail Sales &amp; 4Q Rolling mean ( in &#39;000)&quot;).add_selection( scales ) . . Seasonal Naive . Seasonal naive method uses the observations from the corresponding season from last period. For example, forecast Q3 would be sales from Q3 last year. It does not take any trend or previous history into account. This method, as expected, is not the most accurate but helps create a baseline. As we explore more complex models, we want them to perform better than this and compare them with seasonal naive forecast. . . This method is not available in statsmodels library so I wrote a function for it. . def pysnaive(train_series,seasonal_periods,forecast_horizon): &#39;&#39;&#39; Python implementation of Seasonal Naive Forecast. This should work similar to https://otexts.com/fpp2/simple-methods.html Returns two arrays &gt; fitted: Values fitted to the training dataset &gt; fcast: seasonal naive forecast Author: Sandeep Pawar Date: Apr 9, 2020 Ver: 1.0 train_series: Pandas Series Training Series to be used for forecasting. This should be a valid Pandas Series. Length of the Training set should be greater than or equal to number of seasonal periods Seasonal_periods: int No of seasonal periods Yearly=1 Quarterly=4 Monthly=12 Weekly=52 Forecast_horizon: int Number of values to forecast into the future e.g. fitted_values = pysnaive(train,12,12)[0] fcast_values = pysnaive(train,12,12)[1] &#39;&#39;&#39; if len(train_series)&gt;= seasonal_periods: #checking if there are enough observations in the training data last_season=train_series.iloc[-seasonal_periods:] reps=np.int(np.ceil(forecast_horizon/seasonal_periods)) fcarray=np.tile(last_season,reps) fcast=pd.Series(fcarray[:forecast_horizon]) fitted = train_series.shift(seasonal_periods) else: fcast=print(&quot;Length of the trainining set must be greater than number of seasonal periods&quot;) return fitted, fcast . #Before I create the model, I am going to create a dataframe to store all out-of=sample forecasts and the test set predictions = test.copy() . Seasonal Naive Forecast model . #Fitted values py_snaive_fit = pysnaive(train[&quot;Sales&quot;], seasonal_periods=4, forecast_horizon=6)[0] #forecast py_snaive = pysnaive(train[&quot;Sales&quot;], seasonal_periods=4, forecast_horizon=6)[1] #Residuals py_snaive_resid = (train[&quot;Sales&quot;] - py_snaive_fit).dropna() predictions[&quot;py_snaive&quot;] = py_snaive.values predictions . Sales py_snaive . Date . 2016-09-30 773.0 | 681.0 | . 2016-12-31 592.0 | 557.0 | . 2017-03-31 627.0 | 628.0 | . 2017-06-30 725.0 | 707.0 | . 2017-09-30 854.0 | 681.0 | . 2017-12-31 661.0 | 557.0 | . Plot the Forecast . pd.plotting.register_matplotlib_converters() train[&quot;Sales&quot;].plot(figsize=(12,8))#, style=&quot;--&quot;, color=&quot;gray&quot;, legend=True, label=&quot;Train&quot;) py_snaive_fit.plot(color=&quot;b&quot;, legend=True, label=&quot;SNaive_Fitted&quot;) predictions[&quot;Sales&quot;].plot(style=&quot;--&quot;,color=&quot;r&quot;, legend=True, label=&quot;Test&quot;) predictions[&quot;py_snaive&quot;].plot(color=&quot;b&quot;, legend=True, label=&quot;Snaive_fc&quot;); . Model Evaluation: . #Training score accuracy(train[&quot;Sales&quot;].iloc[-len(py_snaive_fit.dropna()):], py_snaive_fit.dropna()) . %MAPE RMSE . 0 13.9 | 80.3 | . Model Accuracy . #Test score accuracy(predictions[&quot;Sales&quot;], predictions[&quot;py_snaive&quot;]) . %MAPE RMSE . 0 9.4 | 92.0 | . Residual Check . residcheck(py_snaive_resid.dropna(),12); . ** Mean of the residuals: 75.21 ** Ljung Box Test, p-value: 0.339 (&gt;0.05, Uncorrelated) ** Jarque Bera Normality Test, p_value: 0.721 (&gt;0.05, Normal) ** AD Fuller, p_value: 0.071 (&gt;0.05, Non-stationary) . observations: . Seasonal naive forecast actually performs quite well considering it&#39;s just a logical forecasting method and there is no statistical procedure involved. | Model captures seasonality and general trend quite well but under forecasts (underfitting) | Training RMSE is 80.3 and test RMSE is 92 which is less than the standard deviation of the training set (111). | Residual analysis shows residuls are not stationary and have non-zero mean. Residual plot clearly shows that the model hasn&#39;t extracted the trend and seasonal behaviour as well as we would like. Though visually the model seems to perform well, it&#39;s not a useful model on its own | Non-zero mean can be fixed by adding the mean back to the forecasts as explained here but in this case the mean is significantly away from zero. | We could perhaps fit an AR model to the residuals to get more out of it. If you look at the ACF plot, it shows no lags are significant but the PACF plot (see below) shows 4,9,10,11,12 are significant. This is an AR process signature. Thus, if we want to capture information and make this model useful, we can fit an AR model to the residuals to create a 2 layer model | This shows importance of always checking the residuals after fitting the model | #PACF of Seasonal Snaive model residuals plot_acf(py_snaive_resid); plot_pacf(py_snaive_resid); . Triple Exponential Smoothing (Holt-Winter&#39;s Method) . Triple Exponential Smoothing (Holt Winter&#39;s method) decomposes the series into level, trend, seasonality. Future values are predicted by combining these systematic factors based on recent history. The intuitive idea here is that the future will behave very similar to recent past, we just have to find how much of the past is relevant. The three systematic components are: . Level, (alpha): Average value around which the series varies. For a seasonal time series, level is obtained by first de-seasonalizing the series and then averaging. Alpha value determines how much of the past to consider and is between [0,1]. alpha=1 means give importance only to the last data point (naive forecast) | Trend, (beta): Trend is how the level changes over time. Similar to alpha, a beta value closer to 1 indicates the model is considering only the recent trend. Trend also has a damping factor (phi) which determines how much of the recent trend to &#39;forget&#39;. Consider it as a de-rating factor on trend. | Seasonality (gamma): This factor models how the series behaves in each time period for full season. Recall that in the previous blog about EDA (Part 1), I calculated the seasonal factors. Gamma is the same thing. | . This method is called &quot;Exponential&quot; because each of the above factors give exponential weightage to the past values. . Additive model = (Level + Trend) + Seasonality . Multiplicative Model = (Level Trend) Seasonality . The Exponentialsmoothing() method in statsmodels finds the optimal alpha, beta, gamma and phi by minizing the errors. . . Additive vs Multiplicative . Depending on the temporal structure of the time series, trend and seasonality can show additive, multiplicative or mix behaviour. . In case of trend, if the time series has linear trend, it&#39;s additive. If it is exponentially increasing (power law), a multiplicative model might fit better. . Seasonality is calculated relative to the level. If a series has additive seasonality, each season varies +/- relative to the level. E.g. in a quarterly series, in Q1 we might add +30 more units, -60 in Q2, +120 in Q3 and +60 in Q4 relative to level. Thus, seasonality peaks have somehwat fix height relative to level everywhere. On the other hand, in a multiplicative seasonality, the quantities will vary by %, i.e +5% in Q1, -7% in Q2, +10% in Q3 and +5 in Q4 relative to trend. As the level increases or decreases, seasonality can vary by %. . For this time series, we identified during EDA (Part 1) that trend is exponential. Seasonality can be modeled as additive or multiplicatives. Note that we can turn a multiplicative component into additive by taking log or using power transform (BoxCox). This is often preferred and may perform better. . Refer to Part 1 where I calculated these seasonality factors. . I replicated an illustration from Everette Gardener&#39;s paper to show this effect below. I highly recommend reading it if you are ineterested in exponential smoothing. . . Grid Searching Triple Exponential Smoothing (Holt-Winter&#39;s Method) . Instead of fitting each model individually, I wrote a custom function HWGrid() to perform uniform, gridsearch using the model parameters. This function also returns statistics on residuals (Ljung Box test, Normality test and mean). You get model evaluation metric and residual metric for 24 models. This may take a while (5-15 min) on your computer. . m=HWGrid(train[&quot;Sales&quot;], test[&quot;Sales&quot;], seasonal_periods=4) . m . Trend Seasonal Damped BoxCox AICc Train %MAPE_Train RMSE_Train %MAPE_Test RMSE_Test Resid_LJ Resid_Norm Resid_mean . 3 add | add | True | False | 170.6 | 3.55% | 20.4 | 10.79% | 81.3 | Uncorrelated | Normal | 4.4 | . 0 add | add | False | False | 151.8 | 2.41% | 18.2 | 10.98% | 82.6 | Uncorrelated | Normal | 4.9 | . 8 add | mul | False | log | 139.7 | 2.29% | 13 | 11.49% | 84 | Uncorrelated | Normal | 0.8 | . 11 add | mul | True | log | 154.3 | 2.29% | 13 | 11.49% | 84 | Uncorrelated | Normal | 0.8 | . 2 add | add | False | log | 138.9 | 2.20% | 12.7 | 11.69% | 84.8 | Uncorrelated | Normal | 0.8 | . 5 add | add | True | log | 153.4 | 2.20% | 12.7 | 11.69% | 84.8 | Uncorrelated | Normal | 0.8 | . 18 mul | mul | False | False | 137.6 | 2.31% | 12.2 | 11.88% | 86.7 | Uncorrelated | Normal | -0.6 | . 12 mul | add | False | False | 154.7 | 3.09% | 19.7 | 12.09% | 91.1 | Uncorrelated | Normal | 5.8 | . 15 mul | add | True | False | 170.5 | 3.56% | 20.4 | 12.15% | 91.4 | Uncorrelated | Normal | 3.2 | . 23 mul | mul | True | log | 153.4 | 2.32% | 12.7 | 12.52% | 92.1 | Uncorrelated | Normal | 0.8 | . 20 mul | mul | False | log | 139 | 2.24% | 12.7 | 12.61% | 92.4 | Uncorrelated | Normal | 0.6 | . 14 mul | add | False | log | 138.1 | 2.16% | 12.4 | 12.76% | 92.9 | Uncorrelated | Normal | 0.6 | . 17 mul | add | True | log | 152.7 | 2.16% | 12.4 | 12.76% | 92.9 | Uncorrelated | Normal | 0.6 | . 1 add | add | False | True | 139.6 | 2.26% | 13 | 12.85% | 94.6 | Uncorrelated | Normal | 0.8 | . 4 add | add | True | True | 154.2 | 2.26% | 13 | 12.85% | 94.6 | Uncorrelated | Normal | 0.8 | . 10 add | mul | True | True | 154.8 | 2.32% | 13.2 | 12.77% | 94.7 | Uncorrelated | Normal | 0.8 | . 7 add | mul | False | True | 140.3 | 2.32% | 13.2 | 12.78% | 94.7 | Uncorrelated | Normal | 0.8 | . 6 add | mul | False | False | 142 | 1.78% | 13.8 | 13.52% | 98 | Uncorrelated | Normal | 3.4 | . 16 mul | add | True | True | 154.1 | 2.22% | 12.9 | 13.34% | 98.1 | Uncorrelated | Normal | 1.4 | . 9 add | mul | True | False | 156.5 | 1.78% | 13.8 | 13.53% | 98.1 | Uncorrelated | Normal | 3.4 | . 19 mul | mul | False | True | 139.7 | 2.32% | 13 | 13.28% | 98.7 | Uncorrelated | Normal | 0.6 | . 13 mul | add | False | True | 139.4 | 2.25% | 12.9 | 13.45% | 99.2 | Uncorrelated | Normal | 0.7 | . 22 mul | mul | True | True | 154.6 | 2.31% | 13.1 | 13.40% | 99.5 | Uncorrelated | Normal | 0.7 | . 21 mul | mul | True | False | nan | nan% | nan | nan% | nan | Correlated | Non-Normal | 469.6 | . Above resulting dataframe is sorted in ascending order showing model with lowest test RMSE and %MAPE at the top. Cells highlighted in green are the lowest numbers in their respective columns. Some observations from this result: . Train RMSE is much smaller than test RMSE, showing all the models perform far better on training set than test set | Models with additive trend and BoxCox=log are at the top. This confirms the finding from the EDA that the trend was more than linear. By taking the &#39;log&#39;, trend is linearized and thus &quot;additive&quot; model can be used. | The top model [&quot;add&quot;, &quot;add&quot;, True, False] performed the worst on the train set. AICc is also the highest. | Top 5 models have used &#39;log&#39; transformation and generally have very similar performance on the test set. | All models except one at the bottom as Uncorrelated residuals. Recall that model with uncorrelated residuals has captured as much information as it can from the available data. | All models are biased (non-zero mean). Ideally we want the model to have zero mean but in this case the means are small and should be added to the forecast to correct the bias. | All models have residuals that are normal. This is a useful but not necessary condition. Having a model with normal residuals can make prediction interval calculations easier. | Model selection should always be done by comparing test evaluation metric and not by comparing residual diagnostic metrics. | Top and fourth model has high AICc. Third and fifth have almost same performance. We want to select a parsimonious and simple model. I will select the model with additive seasonality and trend as it has the lowest AICc in the top 5 models. | hw_model = ExponentialSmoothing(train[&quot;Sales&quot;], trend =&quot;add&quot;, seasonal = &quot;add&quot;, seasonal_periods=4, damped=False).fit(use_boxcox=&#39;log&#39;) hw_fitted = hw_model.fittedvalues hw_resid = hw_model.resid #Adding the mean of the residuals to correct the bias. py_hw = hw_model.forecast(len(test[&quot;Sales&quot;])) + np.mean(hw_resid) predictions[&quot;py_hw&quot;] = py_hw #Holt-Winter Parameters hw_model.params_formatted . name param optimized . smoothing_level alpha | 7.538529e-01 | True | . smoothing_slope beta | 3.568007e-09 | True | . smoothing_seasonal gamma | 0.000000e+00 | True | . initial_level l.0 | 6.094620e+00 | True | . initial_slope b.0 | 3.675604e-02 | True | . initial_seasons.0 s.0 | -2.463472e-01 | True | . initial_seasons.1 s.1 | -2.036851e-01 | True | . initial_seasons.2 s.2 | -9.372556e-02 | True | . initial_seasons.3 s.3 | -3.542245e-01 | True | . Note the optimized alpha, beta and gamma parameters. . alpha: 0.75, i.e 75% weight was given to the last observation . | beta: learning parameter for trend. very small. Not much weight is given to the recent trend and trend is obatained from distant past . | gamma: seasonal factor is 0. gamma is usually very small (&lt;0.2) and we want it to be small. If the gamma is high, it can lead to overfitting becuase it means the model is learning too much from recent the recenet data. 0 here indicates seasonality is learned from the earliest season. . | . #Plotting train[&quot;Sales&quot;].plot(figsize=(12,8), style=&quot;--&quot;, color=&quot;gray&quot;, legend=True, label=&quot;Train&quot;) hw_fitted.plot(color=&quot;b&quot;, legend=True, label=&quot;HW_Fitted&quot;) predictions[&quot;Sales&quot;].plot(style=&quot;--&quot;,color=&quot;r&quot;, legend=True, label=&quot;Test&quot;) predictions[&quot;py_hw&quot;].plot(color=&quot;b&quot;, legend=True, label=&quot;HW_Forecast&quot;); . Cross-Validation . In the above gridsearch, the training set size was fix and we evaluated the model performance by comparing train AICc, RMSE, %MAPE and test RMSE &amp; %MAPE. Test metrics provides true forecast accuracy and should always be used for model selection. This is the preferred approach when the data size is large. But when the time series is short, cross-validation should be used to make sure the model does not overfit the data. The two common approaches are: . Expanding window cross-validation: We start with some initial training &amp; test sets and with each iteration we add one observation to the training set. Forecast errors are calculated with each iteration and averaged to compare model performance. This simulates the performance of the model as we add more observations. For the final forecast we will using all the available history, so using expanding window gives us a good estimate of the forecast accuracy and uncertainty. . | Rolling Window cross-validation: Similar to Expanding but the training size remains same, instead it moves by one observation each time. Training and test lengths remain same. . | Note that AICc, theoretically, provides the same information because it penalizes complex models that overfit. . . #I would like to perform 5 fold cross validation, want the training size to be at #least 12 and test window = forecast horizon 24 - 4 - 5 = 15. Initial training size should be min 12, max 15. #I will choose 15 hw_cv(data[&quot;Sales&quot;], seasonal_periods=4, initial_train_window=15, test_window=4) . add add False False R: 39.9 ,E: 41.3 add add False True R: 43.4 ,E: 51.0 add add False log R: 40.9 ,E: 36.8 add add True False R: 40.7 ,E: 45.9 add add True True R: 38.2 ,E: 45.4 add add True log R: 33.9 ,E: 39.6 add mul False False R: 35.4 ,E: 39.5 add mul False True R: 42.6 ,E: 50.4 add mul False log R: 44.1 ,E: 40.7 add mul True False R: 38.9 ,E: 40.8 add mul True True R: 37.1 ,E: 45.6 add mul True log R: 37.4 ,E: 41.1 mul add False False R: 44.7 ,E: 43.8 mul add False True R: 47.6 ,E: 49.7 mul add False log R: 46.0 ,E: 39.1 mul add True False R: 163.9 ,E: 90.7 mul add True True R: 292.8 ,E: 70.0 mul add True log R: 487.5 ,E: 39.1 mul mul False False R: 42.6 ,E: 38.9 mul mul False True R: 48.9 ,E: 52.3 mul mul False log R: 43.0 ,E: 39.2 mul mul True False R: 78.4 ,E: nan mul mul True True R: nan ,E: 71.2 mul mul True log R: 3186.8 ,E: 39.9 . Residual Check . residcheck(hw_resid, 12); . ** Mean of the residuals: 0.84 ** Ljung Box Test, p-value: 0.3 (&gt;0.05, Uncorrelated) ** Jarque Bera Normality Test, p_value: 0.419 (&gt;0.05, Normal) ** AD Fuller, p_value: 0.0 (&lt;0.05, Stationary) . Accuracy . accuracy(predictions.Sales,predictions[&quot;py_hw&quot;] ) . %MAPE RMSE . 0 11.8 | 85.7 | . Observations: . In general, cross-validation shows that models with high AICc found in gridsearch have higher cv scores. | Multiplicative trend models have high cv scores | The model I chose from the gridsearch (additive trend, seasonality and logged observations) has the lowest expanding cross-validation score. | Plot shows that the model captures the trend, seasonality very well | This model predicts more sales than the actual (in test). From the gridsearch table, we see that the %MAPE is ~12%. Thus, if we use the this model, we should let the stakeholders know that the forecast error is +12% | Residuals are uncorrelated, normal, stationary with a bias (which we already corrected in the forecast) | Model performed better than seasonal naive approach. | ETS . ETS standards for Error, Trend, Seasonality model (I have also seen some refer to it as ExponenTial Smoothing). It is similar to Holt-Winter&#39;s model above but with a State Space statistical framework. In HoltWinter&#39;s, the time series is decomposed into trend and seasonality and exponential weights are used to make the forecast. In a State Space approach, the underlying statistical process is identified and errors are factored in to make the forecast. Holt, Single Exponential Smoothing, Holt-Winter&#39;s, certain ARIMA models can all be categorised into ETS class models. . ETS models follow a taxonomy of ETS(XYZ) where: . X:Error (aka innovations). It can be Additive (A) or Multiplicative (M) | Y:Trend. Trend component can be No trend (N), additive (A), Multiplicative (M) or damped (Ad) | Z:Seasonality, Null (N), additive (A) or multiplicative (M) | . Thus, ETS(ANN) is an exponential model with additive error, no trend, no seasonality (i.e single exponential smoothing) and ETS(MAM) is analogous to Holt-Winter&#39;s method described above. There can be 24 different ETS models based on above combinations but not all combinations of ETS are stable, especially when error is multiplicative. . statsmodels() has a statespace implementation of exponential smoothing method in its tsa.statespace() class. It only has addditive error, additive &amp; damped trend models for now (as of 4/20/2020). Recall that we can convert a multiplicative model into additive by power transform, so this is not a problem. . Using statespace (ETS) can often work better than Holt Winter because of how the parameters are initialized and optimized. This can make a huge difference in the results as we will see. ETS framework also returns 95% predictive interval which HW does not. . Refer to ch.7 of Hyndman&#39;s book for a quick refrence on ETS models and this for more detailed explanation. . For this series, we already know that trend is exponential so I will use logged version of the training set and model ETS(AAA) and ETS(AAdA) . ETS(A,Ad,A) model with Log . #https://www.statsmodels.org/stable/statespace.html# ets_LAdA=sm.tsa.statespace.ExponentialSmoothing(train_log, trend=True, initialization_method= &#39;heuristic&#39;, seasonal=4, damped_trend=True).fit() fc_LAdA = np.exp(ets_LAdA.forecast(6)) #inverting the Log predictions[&quot;LAdA&quot;]=fc_LAdA . #Plotting train[&quot;Sales&quot;].plot(figsize=(12,8), style=&quot;--&quot;, color=&quot;gray&quot;, legend=True, label=&quot;Train&quot;) np.exp(ets_LAdA.fittedvalues).plot(color=&quot;b&quot;, legend=True, label=&quot;Log-AAdA_Fitted&quot;) predictions[&quot;Sales&quot;].plot(style=&quot;--&quot;,color=&quot;r&quot;, legend=True, label=&quot;Test&quot;) predictions[&quot;LAdA&quot;].plot(color=&quot;b&quot;, legend=True, label=&quot;Log-AAdA_Forecast&quot;); . Accuracy . accuracy(predictions[&quot;Sales&quot;],predictions[&quot;LAdA&quot;]) . %MAPE RMSE . 0 5.1 | 40.9 | . Residual Check . residcheck(ets_LAdA.resid,12); . ** Mean of the residuals: 0.0 ** Ljung Box Test, p-value: 0.346 (&gt;0.05, Uncorrelated) ** Jarque Bera Normality Test, p_value: 0.266 (&gt;0.05, Normal) ** AD Fuller, p_value: 0.712 (&gt;0.05, Non-stationary) . Observations . ETS model performed significantly better than Holt-Winter&#39;s, despite the fact that they both perform exponential smoothing. RSME is 40.9 compared to 86 for HOlt Winter&#39;s. | The primary reason why ETS performs better is the parameter initialization &amp; optimization. Holt Winter&#39;s minimizes the residual error whereas ETS optimizes likelihood. ETS is more likely to obtain global minima faster &amp; more accurately. This doesnt mean ETS will always be better, but in general it should perform better. | Residuals are uncorrelated, normally distributed with 0 mean. | The model struggled initially with a poor fit but it learned the systematic components very well and does an excellent job on the test set | Our observations from EDA and HW model informed the choice to take a log of the training set. In general, it&#39;s always a good idea to try log/BoxCox transform to stablize the variance. | ETS(A,Ad,A) . ets_AAdA=sm.tsa.statespace.ExponentialSmoothing(train, trend=True, initialization_method= &#39;concentrated&#39;, seasonal=4, damped_trend=True).fit() fc_AAdA=ets_AAdA.forecast(len(test)) predictions[&quot;AAdA&quot;]=fc_AAdA . #Plotting train[&quot;Sales&quot;].plot(figsize=(12,8), style=&quot;--&quot;, color=&quot;gray&quot;, legend=True, label=&quot;Train&quot;) ets_AAdA.fittedvalues.plot(color=&quot;b&quot;, legend=True, label=&quot;AAdA_Fitted&quot;) predictions[&quot;Sales&quot;].plot(style=&quot;--&quot;,color=&quot;r&quot;, legend=True, label=&quot;Test&quot;) predictions[&quot;AAdA&quot;].plot(color=&quot;b&quot;, legend=True, label=&quot;AAdA_Forecast&quot;); . Accuracy . accuracy(predictions[&quot;Sales&quot;],predictions[&quot;AAdA&quot;]) . %MAPE RMSE . 0 4.9 | 43.4 | . Residual Check . residcheck(ets_AAdA.resid,12); . ** Mean of the residuals: 0.4 ** Ljung Box Test, p-value: 0.165 (&gt;0.05, Uncorrelated) ** Jarque Bera Normality Test, p_value: 0.582 (&gt;0.05, Normal) ** AD Fuller, p_value: 1.0 (&gt;0.05, Non-stationary) . Observations: . (A,Ad,A) model without taking log also does very well, slightly worse than with log | Residuals are uncorrelated, look more normal than log version but are slightly biased (0.4 mean) | Fit looks better than logged model | Since we are using the damped model, notice how the trend has slowed down and Q3 forecast is lower than actual sales. This was the main reason I chose this model and the reason will be apparent later as we explore more models. | SARIMA (Seasonal, Auto-Regressive, Integrated, Moving Average Model) . SARIMA (Seasonal ARIMA) is a classical, statistical forecasting method that predicts the forecast values based on past values, i.e lagged values (AR) and lagged errors (MA). Unlike Holt-Winter&#39;s (or ETS), it needs the time series to be stationary before it can be used. That&#39;s where the &quot;Integrated&quot; part comes from. &quot;Integration&quot; means differecning the series to remove trend and make it stationary. You can learn amore about the fundamentals by watching below video. Prof. Shmueli also has an excellent book on Forecasting that I highly recommend. . I also recommend this free Coursera course Practical Time Series Analysis if you want to gain practical and intutitive understanding of ARIMA models. . I will share my main take-aways from these and other resources I have used. . . Auto-regression, AR(p): . As the name suggests, it&#39;s the linear regression with its past values | AR (p) =&gt; Current value = mean + fraction (phi) of yesterday&#39;s value + fraction (phi) of day before yesterday&#39;s value +......+ fraction of pth day&#39;s value + noise | If phi is negaitive =&gt; mean inversion, i.e today&#39;s value will likely go down after yesterday&#39;s peak. | If phi is positive =&gt; Momentum | If phi = 0 =&gt; white noise | If phi = 1 =&gt; random walk | phi has to be between [-1,1] for process to be stationary | If the PACF plot cuts off sharply at lag k, while there is a gradual decay in ACF, it&#39;s a AR(p) process. [Note: I keep PACF and AR(P) mnemonic in mind to know which plot to use for identifying AR process) | An AR(1) model is equivalent to MA(infinity) model, (practially q&gt;&gt;50) | Below video explain AR process really well . . Moving Average ,MA(q): . MA process is not the same as taking moving average of a series | MA process is made up of white noise at different times. In MA(q), q tells us how far back along the sequence of white noise we have to loo for weighted average | For example, in our case if the series is an MA(q) process, the forecast is not affected by the previous sales but rather errors in past forecast. | MA processes are not common but when combined with AR, can produce very accurate forecasts | For an MA(q) model, the forecast beyond 1 period will be the same for rest of the forecast horizon | To identify MA(q) process, plot the ACF. If it sharply cuts off at qth lag, it&#39;s an MA(q) process | Thus, ARIMA (p,d,q) = constant + (weighted sum of last p values) + (weighted sum of last q values of forecast errors) after d differencing . Below are the simulated MA and AR processes. If you run this cell a few times and observe the plots, you will not that it&#39;s not possible to distinguish an AR from MA by just looking at the plots. You need to study the ACF &amp; PACF to know the difference. . #Simulating AR process from statsmodels.tsa.arima_process import ArmaProcess ar = np.array([1,-0.9]) ma = np.array([1, 0.9]) AR = ArmaProcess(ar=ar, ma=None) MA = ArmaProcess(ar=None, ma=ma) simulated_AR= AR.generate_sample(125) simulated_MA= MA.generate_sample(125) fig, (ax1, ax2) = plt.subplots(1, 2) # fig = plt.figure(figsize=(10,8)) fig.suptitle(&#39;Simulated AR &amp; MA Processes&#39;) ax1.plot(simulated_AR); ax2.plot(simulated_MA); . Finding the parameters of the ARIMA process (p,d,q) is an art and science. Generally, p+q &lt;=3. Similar to ARIMA, Seasonal ARIMA (SARIMA) has (P,D,Q) parameters, so SARIMA is (p,d,q)(P,D,Q). p+d+q+P+D+Q &lt;=6 (generally) . Instead of finding the above parameters manually by studying the ACF, PACF, we usually use grid searching just like HW method above. pmdarima is a great library for SARIMA forecasting in Python. It returns the parameters that minimizes AICc and also has cross-validation tools.statsmodels has arma_order_select_ic() for identifying order of the ARMA model but not for SARIMA. . Let&#39;s first take a look at the ACF and PACF to identify potential order of the SARIMA model . ACF plot shows that 1st lag is significant (outside the blue band), the ACFs and PACF both decrease gradually. We will need at least 1 differencing to make the series stationary. When ACF and PACF plots do not have sharp cut offs and significant lags at higher orders, its a indication of ARMA process with seasonality. . plot_acf(train[&quot;Sales&quot;]); plot_pacf(train[&quot;Sales&quot;]); . Using pmdarima() to find the SARIMA order with lowest aicc. This may take a few minutes to run. . (auto_arima(train[&quot;Sales&quot;], seasonal=True, m=4, #seasonality_order 4 d=1, #ACF plot showed we need at least 1 differencing information_criterion=&#39;aicc&#39;). #You can choose AIC, BIC. AICc is corrected AIC summary()) . SARIMAX Results Dep. Variable: y | No. Observations: 18 | . Model: SARIMAX(0, 1, 1)x(1, 1, [], 4) | Log Likelihood -55.434 | . Date: Mon, 20 Apr 2020 | AIC 118.867 | . Time: 12:57:38 | BIC 121.127 | . Sample: 0 | HQIC 118.403 | . - 18 | | . Covariance Type: opg | | . | coef std err z P&gt;|z| [0.025 0.975] . intercept 7.0286 | 1.992 | 3.529 | 0.000 | 3.125 | 10.932 | . ma.L1 -0.9992 | 158.481 | -0.006 | 0.995 | -311.617 | 309.618 | . ar.S.L4 -0.7492 | 0.305 | -2.457 | 0.014 | -1.347 | -0.152 | . sigma2 176.2645 | 2.78e+04 | 0.006 | 0.995 | -5.43e+04 | 5.47e+04 | . Ljung-Box (Q): 8.66 | Jarque-Bera (JB): 1.55 | . Prob(Q): 0.73 | Prob(JB): 0.46 | . Heteroskedasticity (H): 1.17 | Skew: -0.84 | . Prob(H) (two-sided): 0.88 | Kurtosis: 3.24 | . Warnings:[1] Covariance matrix calculated using the outer product of gradients (complex-step). Observations . pmdarima() has identified the training set as (0, 1, 1)x(1, 1, 0, 4) process. It&#39;s a seasonal AR(1) with d=D=1. Summary also shows that Ljung Box p value (Prob(Q) and JB p value (Prob(JB) are &gt; 0.05 thus residuals are uncorrelated and normally distributed. Summary also shows MA is significant at lag 1, seasonal AR is significant at lag 4. . #Creating SARIMA model in Python using statsmodels sarima_model=(SARIMAX(endog=train[&quot;Sales&quot;], order=(0,1,1), seasonal_order=(1,1,0,4), trend=&#39;c&#39;, enforce_invertibility=False)) sarima_fit=sarima_model.fit() start = len(train) end = len(train) +len(test) -1 sarima_fitted = sarima_fit.fittedvalues sarima_resid = sarima_fit.resid py_sarima = sarima_fit.predict(start, end, dynamic=False) predictions[&quot;py_sarima&quot;] = py_sarima sarima_fit.plot_diagnostics(); . Residual Check . SARIMAX() has its own residual diagnostics (shown above). It shows the residuals are normally distributed, uncorrelated. Q-Q plot shows an outlier in the lower left but otherwise everyting looks good. . Accuracy . accuracy(predictions.Sales,py_sarima) . %MAPE RMSE . 0 12.6 | 94.4 | . Observations: . SARIMA did worse than Holt-Winter&#39;s method. RMSE for HW was 85.7 | SARIMA2 - (Using Logged value) . Recall that one of the observations from the HW method was log models performed better, so I will try log of the trainining set. The forecast will be logged values so I will inverse it with np.exp() . #Fitting model to log of train (auto_arima(np.log(train[&quot;Sales&quot;]), seasonal=True, m=4, #seasonality_order 4 information_criterion=&#39;aicc&#39;). #You can choose AIC, BIC. AICc is corrected AIC summary()) . SARIMAX Results Dep. Variable: y | No. Observations: 18 | . Model: SARIMAX(1, 1, 0, 4) | Log Likelihood 26.993 | . Date: Mon, 20 Apr 2020 | AIC -47.986 | . Time: 12:57:49 | BIC -46.068 | . Sample: 0 | HQIC -48.163 | . - 18 | | . Covariance Type: opg | | . | coef std err z P&gt;|z| [0.025 0.975] . intercept 0.2848 | 0.032 | 8.979 | 0.000 | 0.223 | 0.347 | . ar.S.L4 -0.8106 | 0.163 | -4.966 | 0.000 | -1.131 | -0.491 | . sigma2 0.0009 | 0.001 | 1.357 | 0.175 | -0.000 | 0.002 | . Ljung-Box (Q): 20.24 | Jarque-Bera (JB): 0.47 | . Prob(Q): 0.09 | Prob(JB): 0.79 | . Heteroskedasticity (H): 0.40 | Skew: -0.24 | . Prob(H) (two-sided): 0.34 | Kurtosis: 2.23 | . Warnings:[1] Covariance matrix calculated using the outer product of gradients (complex-step). It&#39;s a SARIMA model with no (p,d,q). (P,D,Q,m) = (1,1,0,4) . Prob(Q) &gt; 0.05 and Prob(JB) &gt; 0.05 Thus, residuals are uncorrelated and normal ! . sarima_logmodel=(SARIMAX(np.log(train[&quot;Sales&quot;]), order=(0,0,0), seasonal_order=(1,1,0,4), trend=&#39;c&#39;, enforce_invertibility=False)).fit() sarima_log = np.exp(sarima_logmodel.predict(start, end)) predictions[&quot;sarima_log&quot;] = sarima_log slog_fitted = np.exp(sarima_logmodel.fittedvalues) . Residual Check . sarima_logmodel.plot_diagnostics(); . Observations . Residuals are not stationary but are normally distributed and are uncorrelated | There is an outlier in the left tail in the Q-Q plot. This is expected, since we took 1 seasonal differencing so model did not fit well to the early data. | Accuracy . accuracy(predictions.Sales,sarima_log ) . %MAPE RMSE . 0 11.1 | 81.7 | . RMSE &amp; %MAPE are now slightly better than the HW model !!! Plot below shows model did not fit well in the early data but performs well on validation set. . #Plotting train[&quot;Sales&quot;].plot(figsize=(12,8), style=&quot;--&quot;, color=&quot;gray&quot;, legend=True, label=&quot;Train&quot;) slog_fitted.plot(color=&quot;b&quot;, legend=True, label=&quot;HW_Fitted&quot;) predictions[&quot;Sales&quot;].plot(style=&quot;--&quot;,color=&quot;r&quot;, legend=True, label=&quot;Test&quot;) predictions[&quot;sarima_log&quot;].plot(color=&quot;b&quot;, legend=True, label=&quot;LogSARIMA_forecast&quot;); . . Note: There is a misconception that ARIMA is a more accurate method that ETS/Holt-Winters. That&#8217;s not accurate. In this example, ARIMA worked better but that may not always be the case and you won&#8217;t know until you experiment. . Facebook Prophet . Facebook described Prophet library as below in their documentation: . &quot; Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.&quot; . Video below gives great overview of this package. . . My main take aways are: . Prophet was built for high frequency data like daily, hourly, minute etc.. It may not work very well on monthly, quarterly data, but you won&#39;t know until you try. | In addition to forecasting, it also provide changepoints, anomalies which are great for detecting sudden changes in the time series | Prof. Kourentzes tested Prophet along with other methods (ETS, SARIMA) on M3 competition data and found that Prophet performed poorly. | ETS/HW &amp; SARIMA cannot work with multiple seasonalities &amp; high frequency data. Prophet can also include effect of holidays. | Prophet requires the data to be in specific format. Dataframe must have time column ds and time series observations in column y | Though Prophet is designed mainly for high frequency data, it can be used for monthly/quarterly/yearly data with some tweaks. | from fbprophet import Prophet data_fb = data.reset_index() data_fb.columns=[&#39;ds&#39;,&#39;y&#39;] #create new df with columns ds &amp; y train_fb, test_fb = data_fb.iloc[:-len(test)], data_fb.iloc[-len(test):] #create train &amp; test df . #Fit the model to train fb1_model=Prophet(weekly_seasonality=False, daily_seasonality=False, n_changepoints=10, seasonality_mode=&quot;multiplicative&quot;).fit(train_fb) #I tried &quot;additive too&quot;, it was slightly worse #Prophet results are saved to a dataframe using make_future_dataframe() fb1_df=fb1_model.make_future_dataframe(6, freq=&#39;Q&#39;) #set the freq argument to &#39;Q&#39; for quarterly data #We only need &quot;ds&quot; and &quot;yhat&quot; columns.. &quot;ds&quot; is the date column and &quot;yhat&quot; are predictions fb1_fc_df=fb1_model.predict(fb1_df)[[&quot;ds&quot;,&quot;yhat&quot;]] fb1_fc__=fb1_model.predict(fb1_df) #Residuals fb1_resid = train[&quot;Sales&quot;].values - fb1_fc_df[&#39;yhat&#39;].iloc[:len(train)] fb1_fc = fb1_fc_df.iloc[-len(test):] predictions[&quot;fb1&quot;] = fb1_fc[&quot;yhat&quot;].values . fb1_fc_df.head() . ds yhat . 0 2012-03-31 | 362.0 | . 1 2012-06-30 | 385.0 | . 2 2012-09-30 | 432.0 | . 3 2012-12-31 | 341.0 | . 4 2013-03-31 | 382.0 | . Accuracy . accuracy(test[&quot;Sales&quot;],fb1_fc[&quot;yhat&quot;].values) . %MAPE RMSE . 0 8.3 | 65.8 | . Prophet performed significantly better than HW &amp; SARIMA, that too on quarterly data ! I didn&#39;t expect that given how extensively it&#39;s been proven that Prophet does not work well on low frequency data. This is still not as good as the ETS models. . train[&quot;Sales&quot;].plot(figsize=(12,8), style=&quot;--&quot;, color=&quot;gray&quot;, legend=True, label=&quot;Train&quot;) fb1_fc_df.set_index(&#39;ds&#39;)[&quot;yhat&quot;].iloc[:-len(test)].plot(color=&quot;b&quot;, legend=True, label=&quot;Prophet_Fitted&quot;) predictions[&quot;Sales&quot;].plot(style=&quot;--&quot;,color=&quot;r&quot;, legend=True, label=&quot;Test&quot;) fb1_fc_df.set_index(&#39;ds&#39;)[&quot;yhat&quot;].iloc[-len(test):].plot(color=&quot;b&quot;, legend=True, label=&quot;Prophet_forecast&quot;); . Prophet has its own plotting method. As you can see the main drawback with this model is how wide the confidence interval is. . fb1_model.plot(fb1_fc__); . residcheck(fb1_resid,12); . ** Mean of the residuals: -0.0 ** Ljung Box Test, p-value: 0.402 (&gt;0.05, Uncorrelated) ** Jarque Bera Normality Test, p_value: 0.003 (&lt;0.05, Not-normal) ** AD Fuller, p_value: 0.969 (&gt;0.05, Non-stationary) . Observations: . Prophet under forecasts while other methods were over the actual values in the validation set | Prophet captured the overall trend and seasonality well | Above plot also shows that Prophet overfitted the training set. I am sure there are hyperparameters that could be tuned but most the parameters are for high frequency data. Also, Prophet has a cross-validation method built-in, but it only accepts daily or sub-daily data. That&#39;s a limitation. | Residuals are uncorrelated but not-normal, which is ok. | Uncertainty band is very wide. | Forecasts . We evaluated four different forecasting methods: . Seasonal Naive | Holt-Winter&#39;s (Triple Exponential Smoothing) | ETS (Log-AAdA, AAdA) | SARIMA | Prophet | . ETS gave the most accurate forecast, followed by Prophet.. Here&#39;s how the point forecasts compare with each other and the test set: . predictions.round(0) . Sales py_snaive py_hw LAdA AAdA py_sarima sarima_log fb1 . Date . 2016-09-30 773.0 | 681.0 | 813.0 | 761.0 | 725.0 | 783.0 | 797.0 | 717.0 | . 2016-12-31 592.0 | 557.0 | 650.0 | 620.0 | 613.0 | 678.0 | 650.0 | 518.0 | . 2017-03-31 627.0 | 628.0 | 751.0 | 699.0 | 687.0 | 755.0 | 743.0 | 654.0 | . 2017-06-30 725.0 | 707.0 | 813.0 | 781.0 | 724.0 | 811.0 | 803.0 | 716.0 | . 2017-09-30 854.0 | 681.0 | 941.0 | 845.0 | 785.0 | 911.0 | 933.0 | 762.0 | . 2017-12-31 661.0 | 557.0 | 753.0 | 688.0 | 671.0 | 799.0 | 762.0 | 572.0 | . forecasts = predictions.copy() fc_melt=pd.melt(forecasts.reset_index(), id_vars=&#39;Date&#39;, value_vars=forecasts.columns, var_name=&quot;Model&quot;, value_name=&quot;Forecasts&quot;).round(0) fc_melt.head() . Date Model Forecasts . 0 2016-09-30 | Sales | 773.0 | . 1 2016-12-31 | Sales | 592.0 | . 2 2017-03-31 | Sales | 627.0 | . 3 2017-06-30 | Sales | 725.0 | . 4 2017-09-30 | Sales | 854.0 | . Interactive Chart . #Ref:https://altair-viz.github.io/gallery/multiline_tooltip.html # Create a selection that chooses the nearest point &amp; selects based on x-value nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Date&#39;], empty=&#39;none&#39;) # The basic line line = alt.Chart(fc_melt).mark_line(point=True).encode( x=&#39;Date&#39;, y=alt.Y(&#39;Forecasts:Q&#39;,scale=alt.Scale(domain=[500,1000], clamp=True)), color=&#39;Model:N&#39;, tooltip=[&#39;Date&#39;,&#39;Forecasts&#39;,&#39;Model&#39;] ) # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart(fc_melt).mark_point().encode( x=&#39;Date&#39;, opacity=alt.value(0), ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align=&#39;left&#39;, baseline=&#39;top&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Forecasts:Q&#39;, alt.value(&#39; &#39;)) ) text2 = line.mark_text(align=&#39;left&#39;, baseline=&#39;bottom&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Model:N&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(fc_melt).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Date&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text, text2 ).properties( width=800, height=500, title=&quot;Comaprison of various Forecasting Models&quot; ).interactive() . In the above chart, red line is the test set and rest are forecasts. You can zoom-in/out, pan to inspect the fit over the test set. . SNaive &amp; Prophet are below the test while SARIMA and HW are above. AAdA is also below actual in Q3. | HW &amp; SARIMA are almost identical | If we had to pick a single best model, we would use the Log AAdA model which has the lowest RMSE and tracks the actual values very closely. | SARIMA did well on the test set but not so good on the early part of the training set. That&#39;s acceptable but the point is that all these methods did well in training or test. Thus, a better approach is to create an ensemble forecast that combines all or some of these forecasts together. | Many research studies have shown that forecast combination often provides a more robust, accurate forecast that&#39;s less susceptible to overfitting. You can read more here | Ensemble Forecasts . Although there are many different ways to combine forecasts, simple averaging often works as good as a more complex methods and is easier to implement/monitor/debug. As we saw above, some forecasts are above the test and some are below. So hopefully averaging will bring it closer to the actual values. . We have 7 different models with more than 200 possible combinations. Let&#39;s compare their RSME with fc_combo() function I wrote. This function averages the forecasts and calculates the RSME. . . Note: This function uses mean() to average the forecasts but you should try median() as well. Depending on the data and the skewness, meadian() might work better in some cases. . forecasts . Sales py_snaive py_hw LAdA AAdA py_sarima sarima_log fb1 . Date . 2016-09-30 773.0 | 681.0 | 812.646500 | 760.681119 | 724.566985 | 782.950175 | 797.175115 | 716.954330 | . 2016-12-31 592.0 | 557.0 | 649.896932 | 620.038936 | 612.542359 | 677.965781 | 649.770583 | 517.539078 | . 2017-03-31 627.0 | 628.0 | 750.899727 | 698.970622 | 687.029723 | 755.245430 | 743.222703 | 654.222708 | . 2017-06-30 725.0 | 707.0 | 812.897039 | 780.999108 | 724.246686 | 810.558120 | 802.853193 | 715.815974 | . 2017-09-30 854.0 | 681.0 | 941.221318 | 845.246326 | 784.520604 | 910.805446 | 932.851318 | 761.781268 | . 2017-12-31 661.0 | 557.0 | 752.695160 | 687.517889 | 671.296876 | 798.603878 | 762.493309 | 571.860845 | . fc_combo(forecasts.iloc[:,1:]) . (&#39;py_snaive&#39;,) RMSE ==&gt; 92.0 (&#39;py_hw&#39;,) RMSE ==&gt; 85.7 (&#39;LAdA&#39;,) RMSE ==&gt; 40.9 (&#39;AAdA&#39;,) RMSE ==&gt; 43.4 (&#39;py_sarima&#39;,) RMSE ==&gt; 94.4 (&#39;sarima_log&#39;,) RMSE ==&gt; 81.7 (&#39;fb1&#39;,) RMSE ==&gt; 65.8 (&#39;py_snaive&#39;, &#39;py_hw&#39;) RMSE ==&gt; 36.1 (&#39;py_snaive&#39;, &#39;LAdA&#39;) RMSE ==&gt; 48.6 (&#39;py_snaive&#39;, &#39;AAdA&#39;) RMSE ==&gt; 61.8 (&#39;py_snaive&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 43.4 (&#39;py_snaive&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 36.1 (&#39;py_snaive&#39;, &#39;fb1&#39;) RMSE ==&gt; 77.2 (&#39;py_hw&#39;, &#39;LAdA&#39;) RMSE ==&gt; 60.3 (&#39;py_hw&#39;, &#39;AAdA&#39;) RMSE ==&gt; 49.3 (&#39;py_hw&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 89.0 (&#39;py_hw&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 83.5 (&#39;py_hw&#39;, &#39;fb1&#39;) RMSE ==&gt; 35.1 (&#39;LAdA&#39;, &#39;AAdA&#39;) RMSE ==&gt; 37.6 (&#39;LAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 65.3 (&#39;LAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 58.5 (&#39;LAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 37.1 (&#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 56.8 (&#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 48.4 (&#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 47.4 (&#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 87.5 (&#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 38.7 (&#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 33.5 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;) RMSE ==&gt; 36.1 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;) RMSE ==&gt; 37.3 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 46.8 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 42.0 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;fb1&#39;) RMSE ==&gt; 39.3 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;) RMSE ==&gt; 45.2 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 40.9 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 35.8 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 52.0 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 42.8 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 37.8 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 60.9 (&#39;py_snaive&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 46.4 (&#39;py_snaive&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 41.7 (&#39;py_snaive&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 39.6 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;) RMSE ==&gt; 46.0 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 71.0 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 67.1 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.0 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 63.4 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 58.8 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 33.5 (&#39;py_hw&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 86.5 (&#39;py_hw&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 49.5 (&#39;py_hw&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 46.0 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 50.8 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 45.4 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.9 (&#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 70.0 (&#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 38.9 (&#39;LAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 35.0 (&#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 62.8 (&#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 37.7 (&#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 33.3 (&#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 48.5 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;) RMSE ==&gt; 36.4 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 45.3 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 41.7 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 35.3 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 42.7 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 38.7 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 38.7 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 53.3 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.4 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 33.6 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 40.4 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 36.5 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 47.5 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 44.9 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 37.6 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 35.3 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 42.7 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 41.4 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 39.1 (&#39;py_snaive&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.2 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 57.0 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 53.5 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 34.4 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 73.5 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 46.9 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 44.1 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 67.4 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 42.8 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 39.5 (&#39;py_hw&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 56.6 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 56.5 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 37.5 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 34.1 (&#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 46.2 (&#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 42.4 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;) RMSE ==&gt; 42.1 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 39.0 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;fb1&#39;) RMSE ==&gt; 35.8 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 50.5 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.7 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 34.3 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 47.2 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.5 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 34.0 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 40.2 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 42.0 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 38.2 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.0 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.5 (&#39;py_snaive&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.6 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 61.3 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 42.3 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 39.6 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 52.8 (&#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 48.7 (&#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 41.9 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;) RMSE ==&gt; 46.0 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.5 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 34.3 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;LAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 40.2 (&#39;py_snaive&#39;, &#39;py_hw&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 38.5 (&#39;py_snaive&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 36.5 (&#39;py_hw&#39;, &#39;LAdA&#39;, &#39;AAdA&#39;, &#39;py_sarima&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) RMSE ==&gt; 47.1 . Observations: . The best performing model is (&#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) with RMSE = 33.3 which is better than the best solo model LogAAdA (RSME:40) but not by very much. | Notice how some of the individual models that gave very poor forecasts (Seasonal Naive, HW, SARIMA) but when combined with other forecasts, performed very well. Similarly the models that performed the best LogAAdA, SARIMA_Log did not create the best combination forecast. | Diversity of models in forecast combination makes the forecast more robust, typically produce normally distributed errors and narrower prediction intervals. Follow the research work by Prof. Kourentzes for theory and practical advise on forecast combination. | More models in combination does not mean better results. When selecting combinations, focus should be on divertsity of the models selected (different class of models). Some researchers (Armstrong et al) have suggested using 5 models. | This shows the value of experimentation in any statistical /Machine Learning project. | Final Model . For the final model, we use all the data and not just the training set. If we want a single best model we will choose the Log ETS(A,Ad,A). The best combination model is (&#39;AAdA&#39;, &#39;sarima_log&#39;, &#39;fb1&#39;) which has the lowest RMSE. The difference between them is not significant when accuracy is compared. In the next blog, I am going to demonstrate how to deploy this forecasting model in PowerBI &amp; AzureML so to keep things simple, I will use the Log ETS(A,Ad,A) model. Also, ETS allows simulations which can be used for aggregate forecasting and communicating uncertainty. Forecast combination is a fascinating topic and deserves a seperate blog post. . ETS Model . ets_model=sm.tsa.statespace.ExponentialSmoothing(np.log(data), trend=True, initialization_method= &#39;heuristic&#39;, seasonal=4, damped_trend=True).fit() results = ets_model.get_forecast(4) results_df=results.summary_frame(alpha=0.05).apply(np.exp)[[&quot;mean&quot;,&quot;mean_ci_lower&quot;,&quot;mean_ci_upper&quot;]] results_df.round(1) . Sales mean mean_ci_lower mean_ci_upper . 2018-03-31 692.5 | 599.8 | 799.5 | . 2018-06-30 799.1 | 692.1 | 922.6 | . 2018-09-30 939.4 | 813.6 | 1084.6 | . 2018-12-31 725.6 | 628.5 | 837.8 | . fig, ax = plt.subplots() results_df[&#39;mean&#39;].plot(ax=ax, legend=True, label=&quot;Forecast&quot; ) ax.fill_between(results_df.index, results_df[&#39;mean_ci_lower&#39;], results_df[&#39;mean_ci_upper&#39;], alpha=0.2, color=&#39;gray&#39;) data[&quot;Sales&quot;].plot(legend=True, label=&quot;Data&quot;, figsize=(12,8)); . Forecast Uncertainty . Forecasts are based on history and are probabilistic. When creating and communicating the forecasts, it is important that the stakeholders who will be using the forecasts understand the uncertainty in the estimates. Forecasts have four sources of uncertainties: . Random error | Parameters used in the model | Model choice | Data uncertainty | While it&#39;s not possible to estimate all sources of uncertainties, the forecaster should provide enough information/tools to the stakeholders to understand and gauge the risk in using the forecast. Stochastic simulation can be used for risk modeling. . Simulation . Imagine that the stakeholders are interested in the aggregate sales for 2018, i.e the total sales and not just the quarterly sales. The obvious way is to calculate quarterly forecasts, like we did, and then summing them up to get annual sales. While this may provide a good estimate, it will not be correct. Since the quarterly forecasts are distributions, we need to account for the variance in those distributions when calculating the aggregates. If the forecasts were based on median or percentile, we cannot simply add them up. Also, it&#39;s possible that not all forecasts are from normal distributions and thus cannot be added. . Monte Carlo simulation can be used to overcome these challenges. Below we will generate 5000 future forecasts based on the ETS model we have and then calculate the aggregates, prediction intervals and cumulative distribution function for it. . #Simulating 5000 futures sim_frame=ets_model.simulate(4, anchor=&#39;2018-03-31&#39;, repetitions=5000 ).T.reset_index().iloc[:,2:].apply(np.exp).round(1) sim_frame[&quot;aggregate&quot;] = sim_frame.sum(axis=1) sim_frame.tail() . 2018-03-31 00:00:00 2018-06-30 00:00:00 2018-09-30 00:00:00 2018-12-31 00:00:00 aggregate . 4995 632.1 | 858.9 | 868.6 | 804.4 | 3164.0 | . 4996 732.0 | 741.2 | 1019.0 | 698.6 | 3190.8 | . 4997 721.6 | 914.4 | 938.7 | 785.9 | 3360.6 | . 4998 627.2 | 868.6 | 882.2 | 728.8 | 3106.8 | . 4999 585.7 | 905.0 | 873.0 | 765.6 | 3129.3 | . mean_2018_sales = np.mean(sim_frame[&quot;aggregate&quot;]) print(&quot;25th percntile Sales for FY2018:&quot;,np.quantile(sim_frame[&quot;aggregate&quot;], 0.25).round(0)) print(&quot; nAvg Sales for FY2018, Simulation:&quot;,mean_2018_sales.round(0)) print(&quot; n75th percntile Sales for FY2018:&quot;,np.quantile(sim_frame[&quot;aggregate&quot;], 0.75).round(0)) print(&quot; nFY2018 Based on Quarterly Forecasts:&quot;,results_df[&quot;mean&quot;].sum().round(0)) . 25th percntile Sales for FY2018: 3084.0 Avg Sales for FY2018, Simulation: 3163.0 75th percntile Sales for FY2018: 3241.0 FY2018 Based on Quarterly Forecasts: 3157.0 . As you can see, if we just summed up the quarterly forecasts, the aggregate for 2018 would be 3157, and if we used the simulations it would be 3163. In this case the difference is not much and is within the forecast error but that may not always be the case. . When communicating forecasts (or any other uncertainty), providing range is a better solution than providing point estimates. e.g. we calculated the 25% &amp; 75% percentile for the aggregate forecast. Thus, we could say that we are 50% confident that the FY2018 sales would be between 3083 and 3240.i.e P50 [3083 , 3240]. This can also be interpreted as there is only 25% chance that Sales would be &gt;3240 next year. This conveys the uncertainty far better than point estimates. . Confidence Interval vs. Prediction Interval . It&#39;s common to calculate and show 95% confidence around the mean forecast. 95% is a conventional measure and doesn&#39;t have any particular significance. Confidence interval (CI)is not the same as prediction interval (PI). CI is often confused as a measure of uncertainty and is used to show the upper and lower bound for the estimate - it&#39;s not! . Confidence interval is around the populatio point estimate. e.g. if we calculate the mean, to convey the error in calculating it we compute the CI. In our case the mean for Q1 is 692.5 and lower and upper CI bound are [599.8,799.5]. We are 95% confident that the mean will be within this bound. This doesn&#39;t say the forecast will be between these bounds with 95% confidence. Think of CI as error around the population point estimate because of limited sample size. CI will be lower if increase the sample size or lower the alpha. Point estimate means calculating a single number e.g. mean, median, percentile etc. about the population/sample. Also make a note if the CI is calculated using parameters of the models (residuals). . To calculate the upper and lower bound on the forecast, we need prediction interval. PI can be calculated using the forecast errors or simulations. PI gives us the upper and lower bounds based on the model we have created. By definition PI &gt; CI. In our examle, the 97.5th percentile is 923 and 2.5% percentils is 691. Now we can be 95% confident that the forecast for Q1 2018 will be between 923 and 691 ! . Many years ago at the end of my Business Simulations class in grad school, Prof.Nelson said the main take-away from his class should be the difference between PI and CI and correct use/interpretation of CI. I hope after reading this blog, among other things, you will also learn to interprete CI correctly, especially in the context of forecasting. CI is useless for forecasting. . q1_975=np.quantile(sim_frame.iloc[:,1],0.975) q1_025=np.quantile(sim_frame.iloc[:,1],0.025) print(&quot;PI_95%:&quot;, q1_95.round(1)) print(&quot;PI_5%:&quot;, q1_05.round(1)) . PI_95%: 923.3 PI_5%: 691.3 . Cumulative Distribution Function . #Reference: http://stanford.edu/~raejoon/blog/2017/05/16/python-recipes-for-cdfs.html num_bins = 100 counts, bin_edges = np.histogram (sim_frame[&quot;aggregate&quot;], bins=num_bins, normed=True) cdf = np.cumsum (counts) cdf_x = bin_edges[1:] cdf_y = cdf/cdf[-1] cdf_df = pd.DataFrame({&#39;Sales&#39;:cdf_x, &#39;Percentile&#39;:cdf_y}) cdf_df.head() . Sales Percentile . 0 2798.317 | 0.0002 | . 1 2806.334 | 0.0002 | . 2 2814.351 | 0.0006 | . 3 2822.368 | 0.0008 | . 4 2830.385 | 0.0010 | . #collapse-hide # Create a selection that chooses the nearest point &amp; selects based on x-value nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Sales&#39;], empty=&#39;none&#39;) # The basic line line = alt.Chart(cdf_df).mark_line(interpolate=&#39;basis&#39;).encode( x=&#39;Sales:Q&#39;, y=&#39;Percentile:Q&#39;, tooltip = [&quot;Sales&quot;, &quot;Percentile&quot;]) # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart(cdf_df).mark_point().encode( x=&#39;Sales:Q&#39;, opacity=alt.value(0), ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text1 = line.mark_text(align=&#39;left&#39;, baseline=&quot;bottom&quot;,dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Percentile:Q&#39;, alt.value(&#39; &#39;)) ) text2 = line.mark_text(align=&#39;left&#39;, baseline=&quot;top&quot;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Sales:Q&#39;, alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(cdf_df).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Sales:Q&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( line, selectors, points, rules, text1, text2 ).properties( width=600, height=300, title =&quot;FY2018 Sales Probability &quot; ).configure_axis(grid=False) . . This is a dynamic and interactive way for the stakeholders to understand forecast uncertainty. For example, if this French retailer has a Revenue target at least 3300, they have only 12% (1-0.88) chance of achiveing that based on this forecating model. The stakeholders will find this more beneficial for decision making than the typical static forecast chart. You could create similar chart for all quarters and make it more interactive. Power BI can be used for that. . Forecast Using R . Import rpy2 . Use pandas2ri.activate() to convert pandas to R dataframe . %load_ext rpy2.ipython to use %%R magic command to run R in a cell . import rpy2 import warnings warnings.filterwarnings(&#39;ignore&#39;) from rpy2.robjects import pandas2ri import rpy2.rinterface as rinterface pandas2ri.activate() %load_ext rpy2.ipython . R-ETS . ets() package in R uses a state space approach rather than Holt-Winter&#39;s (which can be modeled in ETS form). You can read more here . %%R -i data -o fets,fc_ets library(fpp2) r_train &lt;- ts(data$Sales, start=c(2012,01), frequency=4) fets &lt;- r_train %&gt;% ets() fc_ets&lt;-r_train %&gt;% ets() %&gt;% forecast(h=4) %&gt;% summary() r_train %&gt;% ets() %&gt;% forecast(h=4) %&gt;% autoplot() . print(fets,end=&quot;&quot;) . ETS(M,A,M) Call: ets(y = .) Smoothing parameters: alpha = 0.1564 beta = 1e-04 gamma = 2e-04 Initial states: l = 339.3571 b = 16.5403 s = 0.8781 1.1272 1.0301 0.9646 sigma: 0.05 AIC AICc BIC 241.8271 254.6843 252.4296 . ets() returned ETS(M,A,M) as the best model based on AICc, i.e &quot;multiplicative&quot; error, &quot;additive&quot; trend and &quot;multiplicative&quot; error. We also obtained same results in Python. But because we used a log transform the multiplicative term became additive. . fc_ets . Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 . 0 737.458963 | 690.235833 | 784.682093 | 665.237417 | 809.680508 | . 1 804.569111 | 752.445770 | 856.692452 | 724.853340 | 884.284882 | . 2 899.154431 | 840.263229 | 958.045633 | 809.088110 | 989.220753 | . 3 714.953180 | 667.641498 | 762.264862 | 642.596206 | 787.310153 | . R-SARIMA . %%R -i train -o fsarima r_train &lt;- ts(train$Sales, start=c(2012,01), frequency=4) fsarima &lt;- r_train %&gt;% auto.arima(stepwise=FALSE) . %%R -i data -o fc_arima r_data &lt;- ts(data$Sales, start=c(2012,01), frequency=4) fc_arima&lt;- r_data %&gt;% auto.arima(stepwise=FALSE) %&gt;% forecast(h=4) %&gt;% summary() r_data %&gt;% auto.arima(stepwise=FALSE) %&gt;% forecast(h=4) %&gt;% autoplot() . print(fsarima, end=&quot;&quot;) . Series: . ARIMA(0,1,0)(1,1,0)[4] Coefficients: sar1 -0.6495 s.e. 0.2501 sigma^2 estimated as 433: log likelihood=-58.48 AIC=120.96 AICc=122.16 BIC=122.09 . We obtained the same SARIMA order as Python ARIMA(0,1,0)(1,1,0)[4] . Conclusion . We explored various time series forecasting methods, model selection procedures and created an ensemble forecast that can be used to improve the forecast accuracy. We also briefly covered communicating uncertainty in forecasts. I did not include any deep-learning methods as they generally do well on large dataset with multiple features. Classical methods such as HW/ETS &amp; ARIMA provide more interpretable results which can prove useful for understanding the behaviour of the time time series and make business decisions. In the next blog I will cover deploying this model in PowerBI. . References: . Forecasting: Principles and Practice, by Prof. Hyndman | Time Series Analysis and its Applications, by Robert Shumway | Time Series Analysis and Forecasting, by Montgomery &amp; Jennings | Introduction to Time Series and Analysis, by Brockwell | Practial Time Series Forecasting with R, by Galit Shmueli 6. https://homepage.univie.ac.at/robert.kunst/pres09_prog_turyna_hrdina.pdf |",
            "url": "https://pawarbi.github.io/blog/forecasting/r/python/rpy2/altair/fbprophet/ensemble_forecast/uncertainty/simulation/2020/04/21/timeseries-part2.html",
            "relUrl": "/forecasting/r/python/rpy2/altair/fbprophet/ensemble_forecast/uncertainty/simulation/2020/04/21/timeseries-part2.html",
            "date": " • Apr 21, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Time series Forecasting in Python & R, Part 1 (EDA)",
            "content": "Overview . This is a quarterly sales data of a French retail company from Prof. Rob Hyndman&#39;s &quot;Forecasting Methods &amp; Applications&quot; book. I have uploaded the data to my github.The goals for this first part are: . Exploratory data analysis of the time series | Explain the time series behaviour in qualitative and quantitative terms to build intuition for model selection | Identify the candidate models and possible model parameters that can be used based on the findings in the EDA | Importing libraries . #collapse-hide #Author: Sandeep Pawar #Version: 1.0 #Date Mar 27, 2020 import pandas as pd import numpy as np import itertools #Plotting libraries import matplotlib.pyplot as plt import seaborn as sns import altair as alt plt.style.use(&#39;seaborn-white&#39;) %matplotlib inline #statistics libraries import statsmodels.api as sm import scipy from scipy.stats import anderson from statsmodels.tools.eval_measures import rmse from statsmodels.tsa.stattools import adfuller from statsmodels.graphics.tsaplots import month_plot, seasonal_plot, plot_acf, plot_pacf, quarter_plot from statsmodels.tsa.seasonal import seasonal_decompose from statsmodels.tsa.holtwinters import ExponentialSmoothing, SimpleExpSmoothing from statsmodels.stats.diagnostic import acorr_ljungbox as ljung #from nimbusml.timeseries import SsaForecaster from statsmodels.tsa.statespace.tools import diff as diff import pmdarima as pm from pmdarima import ARIMA, auto_arima from scipy import signal from scipy.stats import shapiro from scipy.stats import boxcox from sklearn.preprocessing import StandardScaler #library to use R in Python import rpy2 from rpy2.robjects import pandas2ri pandas2ri.activate() import warnings warnings.filterwarnings(&quot;ignore&quot;) np.random.seed(786) . . . Note: I have found that results could be significanlty different if you use different versions of the libraries, especially with statsmodels. If you want to reproduce these results, be sure to use the same versions of these libraries. For this project, I created a conda virtual environment as rpy2 requires specific versions of Pandas &amp; certain R libraries . #Printing library versions print(&#39;Pandas:&#39;, pd.__version__) print(&#39;Statsmodels:&#39;, sm.__version__) print(&#39;Scipy:&#39;, scipy.__version__) print(&#39;Rpy2:&#39;, rpy2.__version__) . Pandas: 0.25.0 Statsmodels: 0.11.0 Scipy: 1.4.1 Rpy2: 2.9.4 . #collapse-hide # Define some custom functions to help the analysis def MAPE(y_true, y_pred): &quot;&quot;&quot; %Error compares true value with predicted value. Lower the better. Use this along with rmse(). If the series has outliers, compare/select model using MAPE instead of rmse() &quot;&quot;&quot; y_true, y_pred = np.array(y_true), np.array(y_pred) return np.mean(np.abs((y_true - y_pred) / y_true)) * 100 def residcheck(residuals, lags): &quot;&quot;&quot; Function to check if the residuals are white noise. Ideally the residuals should be uncorrelated, zero mean, constant variance and normally distributed. First two are must, while last two are good to have. If the first two are not met, we have not fully captured the information from the data for prediction. Consider different model and/or add exogenous variable. If Ljung Box test shows p&gt; 0.05, the residuals as a group are white noise. Some lags might still be significant. Lags should be min(2*seasonal_period, T/5) plots from: https://tomaugspurger.github.io/modern-7-timeseries.html &quot;&quot;&quot; resid_mean = np.mean(residuals) lj_p_val = np.mean(ljung(x=residuals, lags=lags)[1]) norm_p_val = jb(residuals)[1] adfuller_p = adfuller(residuals)[1] fig = plt.figure(figsize=(10,8)) layout = (2, 2) ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2); acf_ax = plt.subplot2grid(layout, (1, 0)); kde_ax = plt.subplot2grid(layout, (1, 1)); residuals.plot(ax=ts_ax) plot_acf(residuals, lags=lags, ax=acf_ax); sns.kdeplot(residuals); #[ax.set_xlim(1.5) for ax in [acf_ax, kde_ax]] sns.despine() plt.tight_layout(); print(&quot;** Mean of the residuals: &quot;, np.around(resid_mean,2)) print(&quot; n** Ljung Box Test, p-value:&quot;, np.around(lj_p_val,3), &quot;(&gt;0.05, Uncorrelated)&quot; if (lj_p_val &gt; 0.05) else &quot;(&lt;0.05, Correlated)&quot;) print(&quot; n** Jarque Bera Normality Test, p_value:&quot;, np.around(norm_p_val,3), &quot;(&gt;0.05, Normal)&quot; if (norm_p_val&gt;0.05) else &quot;(&lt;0.05, Not-normal)&quot;) print(&quot; n** AD Fuller, p_value:&quot;, np.around(adfuller_p,3), &quot;(&gt;0.05, Non-stationary)&quot; if (adfuller_p &gt; 0.05) else &quot;(&lt;0.05, Stationary)&quot;) return ts_ax, acf_ax, kde_ax def accuracy(y1,y2): accuracy_df=pd.DataFrame() rms_error = np.round(rmse(y1, y2),1) map_error = np.round(np.mean(np.abs((np.array(y1) - np.array(y2)) / np.array(y1))) * 100,1) accuracy_df=accuracy_df.append({&quot;RMSE&quot;:rms_error, &quot;%MAPE&quot;: map_error}, ignore_index=True) return accuracy_df def plot_pgram(series,diff_order): &quot;&quot;&quot; This function plots thd Power Spectral Density of a de-trended series. PSD should also be calculated for a de-trended time series. Enter the order of differencing needed Output is a plot with PSD on Y and Time period on X axis Series: Pandas time series or np array differencing_order: int. Typically 1 &quot;&quot;&quot; #from scipy import signal de_trended = series.diff(diff_order).dropna() f, fx = signal.periodogram(de_trended) freq=f.reshape(len(f),1) #reshape the array to a column psd = fx.reshape(len(f),1) # plt.figure(figsize=(5, 4) plt.plot(1/freq, psd ) plt.title(&quot;Periodogram&quot;) plt.xlabel(&quot;Time Period&quot;) plt.ylabel(&quot;Amplitude&quot;) plt.tight_layout() . . Importing Data . path = &#39;https://raw.githubusercontent.com/pawarbi/datasets/master/timeseries/ts_frenchretail.csv&#39; #Sales numbers are in thousands, so I am dividing by 1000 to make it easier to work with numbers, especially squared errors data = pd.read_csv(path, parse_dates=True, index_col=&quot;Date&quot;).div(1_000) data.index.freq=&#39;Q&#39; data.head() . Sales . Date . 2012-03-31 362.0 | . 2012-06-30 385.0 | . 2012-09-30 432.0 | . 2012-12-31 341.0 | . 2013-03-31 382.0 | . . Note: I have explicitly set the index frequency to quarterly. This makes plotting and analyzing data with pandas and statsmodels easier. Many methods in Statsmodels have freq argument. Setting the frequency explicitly will pass the value automatically. More date offsets can be found in Pandas documentation here. freq=&amp;#8217;Q-DEC&amp;#8217; in the index.freq below shows quarterly data ending in December. Other advantage of setting the .freq value is that if the dates are not continous, Pandas will throw an error, which can be used to fix the data quality error and make the series continuos. Other common date offsets are: - Monthly Start: &#39;MS&#39; . Quarterly Start: &#39;QS&#39; | Weekly: &#39;W&#39; | Bi Weekly: &#39;2W&#39; | Business/ Weekday: &#39;B&#39; | Hourly: &#39;H&#39; | . data.index . DatetimeIndex([&#39;2012-03-31&#39;, &#39;2012-06-30&#39;, &#39;2012-09-30&#39;, &#39;2012-12-31&#39;, &#39;2013-03-31&#39;, &#39;2013-06-30&#39;, &#39;2013-09-30&#39;, &#39;2013-12-31&#39;, &#39;2014-03-31&#39;, &#39;2014-06-30&#39;, &#39;2014-09-30&#39;, &#39;2014-12-31&#39;, &#39;2015-03-31&#39;, &#39;2015-06-30&#39;, &#39;2015-09-30&#39;, &#39;2015-12-31&#39;, &#39;2016-03-31&#39;, &#39;2016-06-30&#39;, &#39;2016-09-30&#39;, &#39;2016-12-31&#39;, &#39;2017-03-31&#39;, &#39;2017-06-30&#39;, &#39;2017-09-30&#39;, &#39;2017-12-31&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;Date&#39;, freq=&#39;Q-DEC&#39;) . Train Test Split: . Before analyzing the data, first split it into train and test (hold-out) for model evaluation. All the EDA and model fitting/selection should be done first using train data. Never look at the test sample until later to avoid any bias. Typically we want at least 3-4 full seasonal cycles for training, and test set length should be no less than the forecast horizon. . In this example, we have 24 observations of the quarterly data, which means 6 full cycles (24/4). Our forecast horizon is 4 quarters. So training set should be more than 16 and less than 20. I will use first 18 observations for training and keep last 6 for validation.Note that I am always selecting the last 6 values for test by using .iloc[:-6]. As we get more data, this will ensure that last 6 values are always for validation. Unlike typical train/test split, we can not shuffle the data before splitting to retain the temporal structure. . Cross-validation: . Data can be split using the above method or using cross-validation where the series is split into number of successive segments and the model is tested using one-step ahead forecast. Model accuracy in that case is based on the mean of the cross-validation errors over the number of splits used. This minimizes chances of overfitting. Be sure to include at least 1-2 seasonal periods to capture the seasonality. e.g. in this case, the first training set of the CV should be min 8 values so the model has captured seasonal behaviour from 2 years. This is the preferred method when the time series is short. . Our series has 24 obervations so I can use last 6-8 for validation. When the typical train/test split is used, always check the sensisitivity of the model performance and model parameters to train/test size. If AIC or AICc is used for model evaluation, it approximatley approaches cross-validation error asymptotically. I will cover this in Part 2 with the code and example. . . #Split into train and test train = data.iloc[:-6] test = data.iloc[-6:] #forecast horizon h = 6 train_length = len(train) print(&#39;train_length:&#39;,train_length, &#39; n test_length:&#39;, len(test) ) . train_length: 18 test_length: 6 . train.head() . Sales . Date . 2012-03-31 362.0 | . 2012-06-30 385.0 | . 2012-09-30 432.0 | . 2012-12-31 341.0 | . 2013-03-31 382.0 | . Exploratory Data Analysis &amp; Modeling Implications . These are some of the questions I ask at various stages of model building. . Are there any null values? how many? best way to impute the null data? If null/NaNs are present, first identify why the data is missing and if NaNs mean anything. Missing values can be filled by interpolation, forward-fill or backward-fill depending on the data and context. Also make sure null doesnt mean 0, which is acceptable but has modeling implications. | It&#39;s important to understand how the data was generated (manual entry, ERP system), any transformations, assumptions were made before providing the data. | . | Are the data/dates continuous? In this exmaple I am only looking at continous time-series. There other methods that deal with non-continuous data. ETS &amp; ARIMA require the data to be continuous. If the series is not continuous, we can add dummy data or use interpolation. | . | Are there any duplicate dates, data? Remove the duplicates or aggregate the data (e.g. average or mean) to treat duplicates | . | Any &#39;potential&#39; outliers? . Outliers are defined as observations that differ significantly from the general observations. Identify if the data is susceptible to outliers/spikes, if outliers mean anything and how to define outliers. While &#39;Outlier Detection&#39; is a topic in itself, in forecasting context we want to treat outliers before the data is used for fitting the model. Both ETS and ARIMA class of models (especially ARIMA) are not robust to outliers and can provide erroneous forecasts. Data should be analyzed while keeping seasonality in mind. e.g. a sudden spike could be because of the seasonal behaviour and not be outlier. Do not confuse outlier with &#39;influential data&#39;. . | Few ways to treat outliers: . Winsorization: Use Box and whiskers and clip the values tha exceed 1 &amp; 99th percentile (not preferred) | Use residual standard deviation and compare against observed values (preferred but can&#39;t do a priori) | Use moving average to check spikes/troughs (iterative and not robust) | . | Another important reason to pay close attention to outliers is that we will choose the appropriate error metric based on that. There are many error metrics used to assess accuracy of forecasts, viz. MAE, MSE, RMSE, %MAPE, %sMAPE. If outliers are present, don&#39;t use RMSE because the squaring the error at the outlier value can inflate the RMSE. In that case model should be selected/assessed using %MAPE or %sMAPE. More on that in part 2. . | . | Visually any trend, seasonality, cyclic behaviour? This will help us choose the appropriate model (Single, Double, Triple Exponential Smoothing, ARIMA/SARIMA) | If cyclic behiour is present (seasonality is short-order variation e.g. month/quarter, cyclicity occurs over 10-20 years e.g. recession) we will need to use different type of decomposition (X11, STL). Depending on the context and purpose of analysis, seasoanlity adjustment may also be needed. | If multiple seasonalities are present, ETS or ARIMA cannot be used. SSA, TBATS, harmonic regression are more appropriate in that case. FB Prophet can also help with multiple seasonalities. | Frequency of seasonality is important. ETS &amp; SARIMAX are not appropriate for high frequency data such as hourly, daily, sub-daily and even weekly. Consider using SSA,TBTAS, FB Prophet, deep learning models. | . | How does the data change from season to season for each period and period to period and compared to the level? Does it increas/decrease with the trend? Changes slowly, rapidly or remains constant. This is an important observation to be made, especially for ETS model, as it can determine the parametrs to be used &amp; if any preprocessing will be needed. | De-compose the series into level, trend, seasonal components and residual error. Observe the patterns in the decomposed series. | Is the trend constant, growing/slowing linearly or exponentially or some other non-linear function? | Is the seasonal pattern repetitive? | How is the seasonal pattern changing relative to level? If it is constant relative to level, it shows &quot;additive&quot; seasonality, whereas if it is growing, it&#39;s &quot;multiplicative&quot;.(Part 2 covers this in detail) | . | Distribution of the data? will we need any transformations? While normally distributed data is not a requirement for forecasting and doesnt necessarily improve point forecast accuracy, it can help stablize the variance and narrow the prediction interval. | Plot the histogram/KDE for each time period (e.g. each year and each seasona) to get gauge peakedness, spread in the data. It can also help compare different periods and track trends over time. | If the data is severely skewed, consider normalizing the data before training the model. Be sure to apply inverse transformation on the forecasts. Use the same transformation parameters on the train and test sets. Stabilizing the variance by using Box Cox transformation (special case being log &amp; inverse transform), power law etc can help more than normalizing the data. | Watch out for outliers before transformation as it will affect the transformation | Plottng distribution also helps track &quot;concept-drift&quot; in the data, i.e. does the underlying temporal structure / assumption change over time. If the drift is significant, refit the model or at least re-evaluate. This can be tricky in time series analysis. | Uncertainty in the training data will lead to higher uncertainty in the forecast. If the data is highly volatile/uncertain (seen by spread in the distribution, standard deviation, non-constant variance etc), ETS and ARIMA models will not be suitable. Consider GARCH and other methods. | . | Is the data stationary? Is this a white noise, random walk process? . Perhaps the most important concept to keep in mind when doing time series analysis and forecasting is that, time series is a probabilistic / stochastic process, and the time series we are analyzing is a &#39;realization of a stochastic process&#39;. A time signal could be deterministic or stochastic/probabilistic. In a deterministic process, the future values can be predicted exactly with a mathematical function e.g. y = sin(2$ pi$ft). In our case, the future values can only be expressed in terms of probability distribution. The point estimates are mean/median of the distribution. By definition, the mean has a distribution around it and as such the stakeholders should be made aware of the probabilistic nature of the forecast through uncertainty estimates. . | Stationarity: Statistical stationarity means the time series has constant mean, variance and autocorrelation is insignificant at all lags. Autocorrelation is a mouthful, all it means is the correlation with its past self. e.g. to check if two variables are linearly correlated with each other, we calculate their coeff of correlation (Pearson correlation). Similarly, autocorrelation does the same thing but with its past values (i.e lags). More on that later. For a stationary time series, the properties are the same no matter which part of the series (w.r.t time) we look at. This is a core concept of the ARIMA methods, as only stationary processes can be modeled using ARIMA. ETS can handle non-stationary processes. . | White Noise: If a time series has zero mean and a constant variance , i.e. N(0,$ sigma^2$), it&#39;s a white noise. The variables in this case are independent and identically distributed (i.i.d) and are uncorrelated. We want the residuals left after fitting the model to be a white noise. White noise can be identified by using ADFuller test and plotting autocorrelation function (ACF) plots. In an ACF plot, the autocorrelation should be insignificant (inside the 95% CI band) at all lags. | Random Walk: Random walks are non-stationary. Its mean or variance or both change over time. Random walk cannot be forecast because we have more unknowns than the data so we will end up having way too many parameters in the model. In essence, random walk has no pattern to it, it&#39;s last data point plus some random signal (drift). Thus, if the first difference of the time series results in a white noise, it&#39;s an indication of a Random Walk. e.g. most equity stocks are random walk but by looking at percent difference (%growth over time) we can study the white noise. `Next Data point = Previous Data Point + Random Noise` `Random Noise = Next Data Point - Previous Data Point` . | . | . . Note: It&#8217;s easy to mistake randomness for seasonality. In the random walk chart below, it can appear that the data has some seasonality but does not! . #collapse-hide #create white noise with N(0,1.5), 500 points np.random.seed(578) steps = np.random.normal(0,1,500) noise = pd.DataFrame({&quot;x&quot;:steps}) wnoise_chart = alt.Chart(noise.reset_index()).mark_line().encode( x=&#39;index&#39;, y=&#39;x&#39;).properties( title=&quot;White Noise&quot;) #Create random walk with N(0,1.5), 500 points steps[0]=0 rwalk = pd.DataFrame({&quot;x&quot;:100 + np.cumsum(steps)}).reset_index() rwalk_chart = alt.Chart(rwalk).mark_line().encode( x=&#39;index&#39;, y=alt.Y(&#39;x&#39;, scale=alt.Scale(domain=(80,150)))).properties( title=&quot;Random Walk&quot;) wnoise_chart | rwalk_chart . . Auto-correlation? at what lag? Study the second order properties (autocorrelation and power spectral density) of the time series along with mean, standard deviation, distribution. More details below. | . | If trend is present, momentum or mean-reversing? . Time series with momentum indicates the value tends to keep going up or down (relative to trend) depending on the immediate past. Series with mean-reversion indicates it will go up (or down) if it has gone down (or up) in the immediate past. This can be found by examining the coefficients of the ARIMA model. This provides more insight into the process and builds intuition. This doesnt not directly help with forecasting. | . | Break-points in the series? . Are there any structural breaks (shifts) in the series. Structural breaks are abrupt changes in the trend. Gather more information about the sudden changes. If the breaks are valid, ETS/ARIMA models wont work. FB Prophet, dynamic regression, deep learning models, adding more features might help. Identify the possible reasons for change, e.g. change in macros, price change, change in customer preferenaces etc. Note structural change persists for some time, while outliers do not. Break points are different from non-stationarity. Read more here for examples &amp; explanations. In case of structural break-points, consider modeling the segments of the series separately. | . | Intermittent demand? Time series is said to be intermittent when there are several 0 and small values (not nulls) in the series. ETS and ARIMA are not appropriate for this type of time series. It&#39;s a common pattern with inventory time series, especially for new items. Croston&#39;s method is one approach to use for forecasting intermittent demand. | When demand is intermittent, use RMSE rather than %MAPE as the evaluation metric. With %MAPE, the denominator would be 0 leading to erroneous results. | . | #collapse-hide #creating intermittent demand plot demand = [10, 12, 0, 3,50,0,0,18,0,4, 12,0,0,8,0,3] demanddf = pd.DataFrame({&#39;y&#39;: demand, &#39;x&#39;: np.arange(2000, 2016) } ) alt.Chart(demanddf).mark_bar().encode( x=&#39;x&#39;, y=&#39;y&#39;).properties( title=&quot;Example: Intermittent Demand&quot;, width = 700) . . Do we need any exogenous variables/external regressors? It may be necessary to include additional features/variables to accurately capture the time series behaviour. For example, the sales for a retailer might be higher on weekends, holidays, when it&#39;s warmer etc. This is different from seasonal pattern. In such cases, using the &#39;day of the week&#39; or &#39;is_holiday&#39; feature might provide better forecast. ETS models cannot use exogenous variable. SARIMAX (X is for exogenous), deep learning, XGB models are more suited. | Always inspect the residuals after fitting the model. If the residuals are correlated (use ACF/PACF plots, Ljung Box test on residuals), it&#39;s an indication that we are not capturing the time series behaviour accurately and could try adding exogenous behaviour. | . | Are the stakeholders interested in forecast for invidiuals periods or hierarchical forecast? Typically forecasts are made for individual periods, e.g in this example, we are interested in the forecasts for next 4 quarters. But it&#39;s possible that the business leaders might be more interested in the 1 year forecast rather than 4 quarters. We could combine the forecasts from 4 quarters to calculate the forecast for 1 year, but that would be incorrect. As mentioned above, time series is a statistical process with probability distribution. We can get reasonable value by summing the mean forecasts but the uncertainty around those forecasts cannot be added. Also, if the individual forecasts are based on the median (rather than mean), forecasts cannot be added. We will need to calculate &quot;hierarchical forecast* by simulating the future paths and then adding the distributions to get prediction interval. | . | Are forecast explainability &amp; interpretability important? Many traditional and statistical forecasting methods such as ETS, SARIMA are easy to apply, interprete and model parameters/results can help explain the time series behaviour. This can be important in scenarios where such insights can help make business decisions. e.g if an ETS model with damped trend fits better, it can be an indication of slowing growth etc. However, many other models such deep learning, RNN, S2S, LSTM etc are blackbox approaches that may lead to higher accuracy but provide little-to-no explainability. | . | EDA in Pyhton . Data Integrity / Quality . #Any missing data? print(&quot;missing_data:&quot;, train.isna().sum()) print(&quot;unique dates:&quot;, train.index.nunique()) . missing_data: Sales 0 dtype: int64 unique dates: 18 . #Counting number of values for each quarter and Year. Columsn are quarters. #Here each qquarter and year has 1 value, thus no duplicates pd.crosstab(index=train.index.year, columns=train.index.quarter) . col_0 1 2 3 4 . row_0 . 2012 1 | 1 | 1 | 1 | . 2013 1 | 1 | 1 | 1 | . 2014 1 | 1 | 1 | 1 | . 2015 1 | 1 | 1 | 1 | . 2016 1 | 1 | 0 | 0 | . Observations: . No null values | Length of the train set is 18 and we have 12 unique dates/quarters so no duplicate dates | Each year and quarter has 1 observation, so no duplicates and data is continuous | Time Series . Plotting the time series and the 4 quarter rolling mean using Altair. . . Tip: Matplotlib and Seaborn create static charts, whereas plots created with Altair are interactive. You can hover over the data points to read tooltips. The most useful feature is the ability to zoom-in and out. Time series data can be dense and it&#8217;s important to check each time period to get insights. With zoom-in/out, it can be done iteractively without slicing the time series. Altair&#8217;s documentation and example library is great. . #collapse-hide #Create line chart for Training data. index is reset to use Date column train_chart=alt.Chart(train.reset_index()).mark_line(point=True).encode( x=&#39;Date&#39;, y=&#39;Sales&#39;, tooltip=[&#39;Date&#39;, &#39;Sales&#39;]) #Create Rolling mean. This centered rolling mean rolling_mean = alt.Chart(train.reset_index()).mark_trail( color=&#39;orange&#39;, size=1 ).transform_window( rolling_mean=&#39;mean(Sales)&#39;, frame=[-4,4] ).encode( x=&#39;Date:T&#39;, y=&#39;rolling_mean:Q&#39;, size=&#39;Sales&#39; ) #Add data labels text = train_chart.mark_text( align=&#39;left&#39;, baseline=&#39;top&#39;, dx=5 # Moves text to right so it doesn&#39;t appear on top of the bar ).encode( text=&#39;Sales:Q&#39; ) #Add zoom-in/out scales = alt.selection_interval(bind=&#39;scales&#39;) #Combine everything (train_chart + rolling_mean +text).properties( width=600, title=&quot;French Retail Sales &amp; 4Q Rolling mean ( in &#39;000)&quot;).add_selection( scales ) . . Sub-series plot . Sub-series plot to show how the series behaves each year in all seasons (quarterly or monthly) . #collapse-hide alt.Chart(train.reset_index()).mark_line(point=True).encode( x=&#39;quarter(Date)&#39;, y=&#39;Sales&#39;, column=&#39;year(Date)&#39;, tooltip=[&#39;Date&#39;, &#39;Sales&#39;]).properties( title=&quot;Sales: Yearly Subseries plot&quot;, width=100).configure_header( titleColor=&#39;black&#39;, titleFontSize=14, labelColor=&#39;blue&#39;, labelFontSize=14 ) . . #box plot to see distribution of sales in each year fig, ax = plt.subplots(figsize = (12,8)) sns.boxplot(data=train, x=train.index.year, y = &#39;Sales&#39;, ax = ax, boxprops=dict(alpha=.3)); sns.swarmplot(data=train, x=train.index.year, y = &#39;Sales&#39;); . #%Growth each year. Excluding 2016 since we have only 2 quarters growth = train[:&#39;2015&#39;].groupby(train[:&#39;2015&#39;].index.year)[&quot;Sales&quot;].sum().pct_change() growth*100 . Date 2012 NaN 2013 10.263158 2014 21.837709 2015 15.768854 Name: Sales, dtype: float64 . Observations: . Sales has gone up each year from 2012-2015 =&gt;Positive Trend present. | Typically, Sales goes up from Q1 to Q3, peaks in Q3, drops in Q4. Definitely a seasoanl pattern. =&gt; Model should capture seasonality and trend. | Just comparing Q4 peaks, sales has gone up from $432K to $582K =&gt; Trend exists, Model should capture trend. No cyclic behaviour | Overall data looks clean, no observations outside of IQR =&gt; Clean data, no outliers | No structural breaks, intermittent pattern =&gt; ETS and SARIMA may be used | Notice that the length of the bar in box plot increases from 2012-2015. =&gt; Mean &amp; variance increasing, we will need to stabilize the variance by taking log or using Box Cox transform | Quarterly trends &amp; distrbution . Quarterly sub-series plot to see how the series behaves in each quarter across alll years. . #collapse-hide alt.Chart(train.reset_index()).mark_line(point=True).encode( x=&#39;year(Date)&#39;, y=&#39;Sales&#39;, column=&#39;quarter(Date)&#39;, tooltip=[&#39;Date&#39;, &#39;Sales&#39;]).properties( title=&quot;Sales: Quarterly Subseries plot&quot;, width=100).configure_header( titleColor=&#39;black&#39;, titleFontSize=14, labelColor=&#39;blue&#39;, labelFontSize=14 ) . . . Tip: Statsmodels has a quarter_plot() method that can be used to create similar chart easily. . #Quarterly plot: Shows trend for Q1-Q4 for each of the years. Red line shows mean quarter_plot(train); . Distribution of Sales in each year . #collapse-hide #Distribution plot of each year compared with overall distribution sns.distplot(train, label=&#39;Train&#39;, hist=False, kde_kws={&quot;color&quot;: &quot;g&quot;, &quot;lw&quot;: 3, &quot;label&quot;: &quot;Train&quot;,&quot;shade&quot;:True}) sns.distplot(train[&#39;2012&#39;], label=&#39;2012&#39;, hist=False) sns.distplot(train[&#39;2013&#39;], label=&#39;2013&#39;, hist=False) sns.distplot(train[&#39;2014&#39;], label=&#39;2014&#39;, hist=False) sns.distplot(train[&#39;2015&#39;], label=&#39;2015&#39;, hist=False); . . In this case the heatmap feels redundant but when the series is long, heatmap can reveal more patterns . #collapse-hide sns.heatmap(pd.pivot_table(data=train, index=train.index.year, columns=train.index.quarter), square=True, cmap=&#39;Blues&#39;, xticklabels=[&quot;Q1&quot;, &quot;Q2&quot;, &quot;Q3&quot;, &quot;Q4&quot;]); . . Visualizing the quarterly sales for each year as % . #collapse-hide #As stacked bar chart, in % values. stack1= alt.Chart(train[:&#39;2015&#39;].reset_index()).mark_bar().encode( x=alt.X(&#39;sum(Sales)&#39;), y=&#39;year(Date):N&#39;, color=alt.Color( &#39;quarter(Date)&#39;, scale=alt.Scale(scheme=&#39;category10&#39;)), tooltip=[&quot;Date&quot;, &quot;Sales&quot;]).properties( height=100, width = 300, title = &quot;Sum of Sales by each Quarter&quot;) stack2= alt.Chart(train[:&#39;2015&#39;].reset_index()).mark_bar().encode( x=alt.X(&#39;sum(Sales)&#39;, stack=&#39;normalize&#39;), y=&#39;year(Date):N&#39;, color=alt.Color( &#39;quarter(Date)&#39;, scale=alt.Scale(scheme=&#39;category10&#39;)), tooltip=[&quot;Date&quot;, &quot;Sales&quot;] ).properties( height=100, width = 300, title = &quot;Sum of Sales as % by each Quarter&quot;) stack1 | stack2 . . pie= train[:&#39;2015&#39;].groupby(train[:&#39;2015&#39;].index.quarter)[&quot;Sales&quot;].sum().plot.bar( title=&quot;Total Sales by Quarter 2012-2015&quot;, legend=True, label=&quot;Sales each Quarter&quot;) . Seasonality Factor . This will help us understand how much each quarter contributes relative to the average demand. Note that this should be done on a de-trended series(taking first difference) but because we don&#39;t have enough data and for a quick demonstration, I am using the series as is. . #Groupby Sales by Quarter #Only use upto 2015 because we have partial data for 2016 train_2015=train[:&#39;2015&#39;] avg_2015= np.int(train[:&#39;2015&#39;].mean()) #Avg sales per quarter qrt_avg=train_2015.groupby(train_2015.index.quarter)[&quot;Sales&quot;].mean() #Groupby quarter qrt_table = pd.pivot_table(train_2015, index=train_2015.index.quarter, columns=train_2015.index.year) #add qrt_avg to qrt_table qrt_table[&quot;avg&quot;] = qrt_avg #Additive Seasonality Factor: Subtract mean from avg column qrt_table[&quot;additive&quot;] = qrt_table[&quot;avg&quot;]-avg_2015 #Multiplicative Seasonality Factor: Subtract mean from avg column qrt_table[&quot;multiplicative&quot;] = (qrt_table[&quot;avg&quot;]/avg_2015).round(2) qrt_table.index.name=&quot;Quarters&quot; qrt_table . Sales avg additive multiplicative . Date 2012 2013 2014 2015 . Quarters . 1 362.0 | 382.0 | 473.0 | 544.0 | 440.25 | -34.75 | 0.93 | . 2 385.0 | 409.0 | 513.0 | 582.0 | 472.25 | -2.75 | 0.99 | . 3 432.0 | 498.0 | 582.0 | 681.0 | 548.25 | 73.25 | 1.15 | . 4 341.0 | 387.0 | 474.0 | 557.0 | 439.75 | -35.25 | 0.93 | . Observations: . Quarter plot &amp; heatmap confirm peak in Q3, drop in Q4. | For each of the years the upward trend observed in all quarters | Kenel Density plot shows data looks normally distributed, bi-modal distribution in quarters is because of small sample size. Peaks shift right from 2012 to 2015 indicating increase in average. | Distribution becomes fatter as the years progress, indicating higher spread/variation (as seen above in boxplot too) | Though The sales peak in Q3 each year, as a % of annual sales, all quarters contribute roughly the same | Seasonal factor analysis shows that in 3rd quarter we see that sales jump up by 15% (or $73K) relative to average while in other three quarters it drops by 1-7%. This is great for intuitive understanding of series behaviour. Another key takeaway from this analysis is that sales is not stable, as is evident from the charts above, multiplicative seasonality would capture the pattern better than additive seasonality. This insight will come handy when we create HW/ETS model (part 2). We could also reduce the variance by taking the log so errors are additive. | Decomposition . We will de-compose the time series into trend, seasonal and residuals . . Tip: Always use a semicolon (;) after plotting any results from statsmodels. For some reason if you don&#8217;t, it will print the plots twice. Also, by default the statsmodels plots are small and do not have a figsize() argument. Use rcParams() to define the plot size . decompose = seasonal_decompose(train[&quot;Sales&quot;]) decompose.plot(); plt.rcParams[&#39;figure.figsize&#39;] = (12, 8); . Observations: . Trend is more than linear, notice a small upward take off after 2013-07. Also notice that trend is projecting upward . | Seasonal pattern is consistent | Resduals are whetever is left after fitting the trend and seasonal components to the observed data. It&#39;s the component we cannot explain. We want the residuals to be i.i.d (i.e uncorrelated). If the residuals have a pattern, it means there is still some structural information left to be captured. Residuals are showing some wavy pattern, which is not good. Let&#39;s perform Ljung Box test to confirm if they are i.i.d as a group. | We do not want to see any recognizable patterns in the residuals, e.g. waves, upward/downward slope, funnel pattern etc. | ljung_p = np.mean(ljung(x=decompose.resid.dropna())[1]).round(3) print(&quot;Ljung Box, p value:&quot;, ljung_p, &quot;, Residuals are uncorrelated&quot; if ljung_p&gt;0.05 else &quot;, Residuals are correlated&quot;) . Ljung Box, p value: 0.184 , Residuals are uncorrelated . Residuals are uncorrelated. If the residuals are correlated, we can perform transformations to see if it stabilizes the variance. It&#39;s also an indication that we may need to use exogenous variable to fully explain the time series behaviour or use higher order models. In this case, the residuals are uncorrelated so that&#39;s good. . . Note: Ljung Box test tests the residuals as a group. Some residuals may have significant lag but as a group, we want to make sure they are uncorrelated. . Second Order Properties of the time series . We study the second order properties to understand - . is the data stationary | is the data white noise, random walk? i.e are the lags correlated? | quantify seasonal/cyclic behviour | . Stationarity: . For the series to be stationary, it must have: . constant mean | constant variance | constant covariance (uncorrelated) | . We verify this by observing change in mean, variance, autocorrelation and with a statistical test (ADFuller test) . Is the mean constant? . train.plot(figsize=(12,6), legend=True, label=&quot;Train&quot;, cmap=&#39;gray&#39;) train[&quot;Sales&quot;].rolling(4, center=False).mean().plot(legend=True, label=&quot;Rolling Mean 4Q&quot;); print(&quot;Mean is:&quot;, train[&quot;Sales&quot;].mean()) . Mean is: 496.5 . Notice that each year, the difference between the mean and the max in Q3 increases. This can potentially mean multiplicative seasonality. . Is the variance constant? . train[&quot;Sales&quot;].rolling(4).std().plot(legend=True, label=&quot;Rolling Std Deviation 4Q&quot;); print(&quot;S.D is:&quot;, train[&quot;Sales&quot;].std().round(1)) . S.D is: 110.9 . Both mean and standard deviation are increasing, thus not stationary. . Coefficient of Variation: . Coefficient of variation gives us an idea about the variability in the process, especially when looking at sales and demand. Note that this should be used for relative comparison and does not have a strict statistical defition. It&#39;s very common measure in demand planning and inventory analytics. . c.v = s.d/mean . If C.V&lt;0.75 =&gt; Low Variability . If 0.75&lt;C.V&lt;1.3 =&gt; Medium Variability . If C.V&gt;1.3 =&gt; High Variability . cv = train[&quot;Sales&quot;].std()/train[&quot;Sales&quot;].mean() cv.round(2) . 0.22 . This is a low-variability process. . Is the covariance constant? . #Plot ACF and PACF using statsmodels plot_acf(train); plot_pacf(train); . ADFuller Test for stationarity . Augmented Dicky Fuller test is a statistical test for stionarity. If the p value is less than 0.05, the series is stationary, otherwise non-stationary. Use adfuller() from statsmodels . #Calculate ad fuller statistic adf = adfuller(train[&quot;Sales&quot;])[1] print(f&quot;p value:{adf.round(4)}&quot;, &quot;, Series is Stationary&quot; if adf &lt;0.05 else &quot;, Series is Non-Stationary&quot;) . p value:0.999 , Series is Non-Stationary . Observations: . ACF: ACF plot shows autocorrelation coeff is insignificant at all lag values (within the blue 95%CI band), except lag 1. When studying ACF plots, we look at these 4 things Are any lags significant, i.e outside the blue band of 95% CI. If they are, the series is correlated with itself at those lags. Note there is 5% chance that the lag shown as insignificant (ACF=0) is shows as significant. In our case, 1st lag is barely significant, indicating sales last quarter affect the sales this quarter. | How quickly do the bar lenghts change: If the bars are taping down, that shows presence of trend. Our series has a trend | Pattern: If the ACF shows up/down repeating pattern, it means seasonality with size equal to length of repetition. | Sign of ACF: Alternating signs in ACF shows mean-reversing process whereas if all the ACs are positive (or negative), it shows momentum process. | . | Properties of ACF help us determine the order of the MA process. More on that in part 2. . PACF: Partial autocorrelation, similar to partial correlation, shows correlation after &#39;partialing out&#39; previous lags. If a series has PACF significant at lag k, it means controlling for other lags &lt;k, lag k has a significant correlation. PACF plot is used to determine order of AR process. . | ADFuller test shows that the series is not stationary. We can try to make it stationary by differencing it. . | #De-trending de_trended = train.diff(1).dropna() adf2 = adfuller(de_trended)[1] print(f&quot;p value:{adf2}&quot;, &quot;, Series is Stationary&quot; if adf2 &lt;0.05 else &quot;, Series is Non-Stationary&quot;) de_trended.plot(); . p value:1.544700848240804e-18 , Series is Stationary . By taking the first difference we de-trended the series and it has become stationary! . Autocovariance function vs autocorrelation fucntion The autocovariance measures the linear dependence between two points on the same series observed at different times. Very smooth series exhibit autocovariance functions that stay large even when the t and s are far apart, whereas choppy series tend to have autocovariance functions that are nearly zero for large separations. autocorrelation functions (ACF) measures the predictability (linear), and is the normalized autocovariance. ACF, just like a correlation coeff, is between [-1,1] and is easier to interprete. Both measure linear dependence between random variables. . For example, the scatterplot below shows the train[&quot;Sales&quot;] plotted against it&#39;s first lag. We can see a linear, although weak, relationship between them. Use pandas.plotting.lag_plot() . Lag plot, 1st lag . pd.plotting.lag_plot(train[&quot;Sales&quot;],1); . Lag plot, 2nd lag : Weak relationship . pd.plotting.lag_plot(train[&quot;Sales&quot;],2); . . Note: If you wish to study the lags, you can obtain it by .shift() method. . sns.scatterplot(train[&quot;Sales&quot;], train[&quot;Sales&quot;].shift(-1)); . . Important: Use statsmodels for calculating ACF and NOT pandas pd.Series.autocorr() . Statsmodels and R use mean differencing, i.e subtract the mean of the entire series before summing it up, whereas Pandas uses Pearson correlation to calculate the ACF. Pearson correlation uses mean of the subseries rather than the entire series. For a long time series, the difference between the two should be negligible but for a short series, the diffrenece could be significant. In most cases, we are more interested in the pattern in the ACF than the actual values so, in a practical sense either would work. But, to be consistent and accurate use statsmodels to calculate and plot the ACF. . Which frequencies are prominent? . We typically look at the time series in the time domain. But, we can also analyze the time series in the frequency domain. It&#39;s based on the assumption that it is made up of sine and cosine waves of different frequencies. This helps us detect periodic component of known/unknown frequencies. It can show additional details of the time series that can be easily missed. We do it with a Periodogram and Power Spectral Density plot. . Periodogram: We analyze frequency and associated intensity of frequency. Note that below I have invrted the frequency to obtain periods Period,T = 1/frequency. For example, a monthly time series has 12 seasonal periods, so we would obtain frequency = 1/12 = 0.0833. In our example, we expect to see the intensity to be high at period=4 . . Tip: Periodogram should be plotted for a de-trended time series. Time series can be obtained by differencing the series . plot_pgram(train[&quot;Sales&quot;],1); . Power Spectral Density: Periodogram assumes the frequencies to be harmonics of the fundamental frequency, whereas PSD allows the frequency to vary contunuously. PSD is calculated using autocovariance function (ACF seen above). Spectral density is the amount of variance per frequency interval. PSD shows the eaxct same information of the time series as the ACF, just in the frequency domain. We rarely use PSD for business time series analysis. Plot below shows that lower frequency content dominates the time series. If it had another bump at higher frequency, that would indicate cyclic behaviour. Sometime it can be easier to figure out MA vs AR process by looking at the PSD plot. . #Plot PSD plt.psd(train[&quot;Sales&quot;], detrend=&#39;linear&#39;); plt.title(&quot;PSD Plot&quot;); . Is the series Normal? . As mentioned above, series does not have to be Gaussian for accurate forecasting but if the data is highly skewed it can affect the model selection and forecast uncertainty. In general, if the series is non-gaussian, it should be normalized before any further transformations (differencing, log, Box Cox) at least to check if normalization helps. Normalization will also help if decide to use regression, tree-based models, NN models later. Note that with normalization, we make the z score between [0,1], with standardization on the other hand , we center the distribution with mean =0, s.d.=1. . Normality can be checked visually by plotting the density plot, q-q plot and Shapiro-Wilk test. . #Distribution Plot sns.distplot(train[&quot;Sales&quot;]); . #Q-Q Plot sm.qqplot(train[&quot;Sales&quot;], fit=True, line=&#39;45&#39;, alpha=0.5, dist=&#39;norm&#39; ); . #Jarque Bera Stastical Test for Normality from scipy.stats import jarque_bera as jb is_norm=jb(train[&quot;Sales&quot;])[1] print(f&quot;p value:{is_norm.round(2)}&quot;, &quot;, Series is Normal&quot; if is_norm &gt;0.05 else &quot;, Series is Non-Normal&quot;) . p value:0.59 , Series is Normal . Observations: . Q-Q plot shows the data follows the 45deg line very closely, deviates slightly in the left tail. | Jarque Bera test shows the data is from Normal distribution | Summary . Model explainability is as important as model accuracy. We will keep above insights in mind when choosing, fitting, evaluating and selecting various models. We will choose the model that we can explain based on above insights. It is important to be able to explain the time series behavour in qualitative and quantitative terms. . In Part 2, I will cover model fitting, selection and ensemble forecasting . EDA in R . Forecasting Principles and Practice by Prof. Hyndmand and Prof. Athanasapoulos is the best and most practical book on time series analysis. Most of the concepts discussed in this blog are from this book. Below is code to run the forecast() and fpp2() libraries in Python notebook using rpy2 . import rpy2 import warnings warnings.filterwarnings(&#39;ignore&#39;) from rpy2.robjects import pandas2ri import rpy2.rinterface as rinterface pandas2ri.activate() %load_ext rpy2.ipython . %%R -i data,train -o r_train library(fpp2) r_train &lt;- ts(train$Sales, start=c(2012,01), frequency=4) r_train %&gt;% autoplot() + ggtitle(&quot;French Retail&quot;) +xlab(&quot;Year-Quarter&quot;)+ylab(&quot;Retail Sales&quot;) . %Rpush r_train . %%R -i r_train r_train %&gt;% ggsubseriesplot() . Lag Plots . %%R r_train %&gt;% gglagplot() . ACF Plots . %%R r_train %&gt;% ggAcf() . R shows 3 lags to be significant, whereas in Python we saw only the first lag to be significant. I am not sure why. Just to confirm, I am did the analysis in JMP statistical software which I use at work for statistical analysis. Below are the results. It matches with Python&#39;s results - 1st lag to be significant, spectral density plot matches too. . . Outlier detection . %%R -o olier olier &lt;- r_train %&gt;% tsoutliers() . print(olier, end=&quot;&quot;) . $index integer(0) $replacements numeric(0) . using tsoutliers() does not return any results, showing there are no statistical outliers . Summary . Here is a summary of what we have learned about this time series: . There are no null values, outliers or duplicate values in the series. Series is continuous, non-intermittent. No structural breaks. We don&#39;t have to do any cleaning. | Series has a trend. Sales have increased every year. It looks more than linear but less than exponential. We might need to try lof or BoxCox transform. | Series has seasonality with seasonal periods = 4. Peak in Q3, drops in Q4, ramps up from Q1 to Q3. No other dominant periods. No cyclic behaviour. | Avg sales per quarter is 497, and S.D is 111, low variability. We will use this to guage the model error relative to mean and S.D. | Since it is not a high-frequency data and has fixed seasonality, we can use ETS and SARIMA class of models | SARIMA could be used. We will need at least 1 differencing as de-trended series was stationary | Mean, variance, covariance are not constant. Series is not stationary, not white noise and not random-walk. | Variance increasing with time. Highs also look to be increasing relative to mean (rolling avg). &#39;multiplicative&#39; seasonality might fit better in ETS model | Series is normally distributed | 1st lag was significant, though barely (ACF~0.5) | We do not have any information on exogenous variables | As there are no outliers and series is not intermittent, we can use RSME for model evaluation | We never looked at the test data. All the EDA and model building must be done using the training set. Intuitively, given what we have observed in the training set, we expect the forecast to be on the upward trend with slightly mupltiplicative seasonality. | References: . Forecasting: Principles and Practice, by Prof. Hyndman | Time Series Analysis and its Applications, by Robert Shumway | Time Series Analysis and Forecasting, by Montgomery &amp; Jennings | Introduction to Time Series and Analysis, by Brockwell | Practial Time Series Forecasting with R, by Galit Shmueli |",
            "url": "https://pawarbi.github.io/blog/forecasting/r/python/rpy2/altair/2020/04/21/timeseries-part1.html",
            "relUrl": "/forecasting/r/python/rpy2/altair/2020/04/21/timeseries-part1.html",
            "date": " • Apr 21, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pawarbi.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Sandeep Pawar. I am a Simulation &amp; Data Analytics Engineer at Cree Lighting where I focus on using computational simulations (FEA, CFD), data analystics, Statistics, Machine Learning to improve products and processses. My primary background is in Mechanical Engineering &amp; Product Development which I use to create insightful data solutions for manufacturing operations. I like challenging myself to learn new things. . I enjoy watching cricket and making espressos &amp; latte art. . . Education: . M.S, Mechanical Engineering, Illinois Institute of Technology, Chicago IL | Masters in Engineering Management, Business Analytics, Northwestern University, IL | . You can connect with me on LinkedIn and Twitter at: . LinkedIn | Twitter | Azure Notebooks | .",
          "url": "https://pawarbi.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}